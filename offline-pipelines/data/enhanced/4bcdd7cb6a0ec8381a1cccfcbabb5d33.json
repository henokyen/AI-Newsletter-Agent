{
    "id": "4bcdd7cb6a0ec8381a1cccfcbabb5d33",
    "metadata": {
        "id": "4bcdd7cb6a0ec8381a1cccfcbabb5d33",
        "url": "https://duckdb.org/",
        "title": "DuckDB â€“ An in-process SQL OLAP database management system",
        "properties": {
            "description": "DuckDB is an in-process SQL OLAP database management system. Simple, feature-rich, fast & open source.",
            "keywords": null,
            "author": "GitHub User",
            "og:title": "An in-process SQL OLAP database management system",
            "og:locale": "en_US",
            "og:description": "DuckDB is an in-process SQL OLAP database management system. Simple, feature-rich, fast & open source.",
            "og:url": "https://duckdb.org/",
            "og:site_name": "DuckDB",
            "og:image": "https://duckdb.org/images/sharingduckdb.jpg",
            "og:type": "website",
            "twitter:card": "summary",
            "twitter:site": "@DuckDB",
            "twitter:creator": "@GitHub User"
        }
    },
    "parent_metadata": {
        "id": "335f7dc1ba71d306afd29c898db85fd6",
        "url": "https://www.notion.so/Databases-335f7dc1ba71d306afd29c898db85fd6",
        "title": "ðŸ“™Â Databases",
        "properties": {
            "Type": "Node"
        }
    },
    "content": "[![DuckDB Logo for Download](https://duckdb.org/images/logo-dl/DuckDB_Logo-horizontal.svg)](https://duckdb.org/)\n[Documentation](https://duckdb.org/docs/)\n  * [Getting Started](https://duckdb.org/docs)\n  * [Installation](https://duckdb.org/docs/installation/)\n  * [Guides](https://duckdb.org/docs/guides/index)\n  * [Data Import](https://duckdb.org/docs/data/overview)\n  * [Client APIs](https://duckdb.org/docs/api/overview)\n  * [SQL Introduction](https://duckdb.org/docs/sql/introduction)\n  * [Why DuckDB](https://duckdb.org/why_duckdb)\n  * [FAQ](https://duckdb.org/faq)\n\n\n[Resources](https://duckdb.org/)\n  * [Blog](https://duckdb.org/news/)\n  * [Media](https://duckdb.org/media/)\n  * [Events](https://duckdb.org/events/)\n  * [Webshop](https://shop.duckdb.org/)\n\n\n[GitHub 28.1k](https://github.com/duckdb/duckdb)\n[Support](https://duckdblabs.com/#support)\n[Support](https://duckdblabs.com/#support)\nSearch Shortcut cmd + k | ctrl + k\n#  DuckDB is a fast \n|\ndatabase system \nQuery and transform your data anywhere using DuckDB's feature-rich SQL dialect\n[Installation](https://duckdb.org/#quickinstall) [Documentation](https://duckdb.org/docs/)\n  * SQL\n  * Python\n  * R\n  * Java\n  * Node.js\n\n\n12345678\n```\n-- Get the top-3 busiest train stations\nSELECT\n  station_name,\n  count(*) AS num_services\nFROM train_services\nGROUP BY ALL\nORDER BY num_services DESC\nLIMIT 3;\n```\n\nAggregation query Join query Read remote CSV files Read remote Parquet files Spatial extension\nAggregation query\n  * Aggregation query\n  * Join query\n  * Read remote CSV files\n  * Read remote Parquet files\n  * Spatial extension\n\n\n[Live demo](https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count\\(*\\)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~)\n#  DuckDB at a glance \n###  Simple \nDuckDB is easy to [install](https://duckdb.org/docs/installation) and deploy. It has zero external dependencies and runs in-process in its host application or as a single binary.\n[Read more](https://duckdb.org/why_duckdb#simple)\n###  Portable \nDuckDB runs on Linux, macOS, Windows, Android, iOS and all popular hardware architectures. It has idiomatic [client APIs](https://duckdb.org/docs/stable/clients/overview) for major programming languages.\n[Read more](https://duckdb.org/why_duckdb#portable)\n###  Feature-rich \nDuckDB offers a [rich SQL dialect](https://duckdb.org/docs/stable/sql/introduction). It can read and write file formats such as CSV, Parquet, and JSON, to and from the local file system and remote endpoints such as S3 buckets.\n[Read more](https://duckdb.org/why_duckdb#feature-rich)\n###  Fast \nDuckDB runs analytical queries at blazing speed thanks to its columnar engine, which supports parallel execution and can process larger-than-memory workloads.\n[Read more](https://duckdb.org/why_duckdb#fast)\n###  Extensible \nDuckDB is extensible by third-party features such as new data types, functions, file formats and new SQL syntax. User contributions are available as community extensions.\n[Read more](https://duckdb.org/why_duckdb#extensible)\n###  Free \nDuckDB and its core extensions are open-source under the permissive MIT License. The intellectual property of the project is held by the [DuckDB Foundation](https://duckdb.org/foundation).\n[Read more](https://duckdb.org/why_duckdb#free)\n#  Installation \nDuckDB is seamlessly integrated with major programming languages. It can be installed in less than 10 seconds on most platforms.\n[More installation options](https://duckdb.org/docs/installation/)\n  * Command line\n  * Python\n  * R\n  * Java\n  * Node.js\n  * ODBC\n  * Rust\n  * Go\n\n\n```\ncurl https://install.duckdb.org | sh\n```\n\nLatest release: DuckDB 1.2.1 |  System detected: Linux\n```\npip install duckdb\n```\n\n```\ninstall.packages(\"duckdb\")\n```\n\n```\n<dependency>\n\t<groupId>org.duckdb</groupId>\n\t<artifactId>duckdb_jdbc</artifactId>\n\t<version>1.2.1</version>\n</dependency>\n```\n\n```\nnpm install @duckdb/node-api\n```\n\n```\ncurl https://install.duckdb.org | sh\n```\n\n```\ncurl https://install.duckdb.org | sh\n```\n\n[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip)\n[odbc-osx-universal.zip](https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/odbc-osx-universal.zip)\n[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_odbc-linux-amd64.zip](https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/duckdb_odbc-linux-amd64.zip)\n[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_odbc-windows-amd64.zip](https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/duckdb_odbc-windows-amd64.zip)\n```\ncargo add duckdb --features bundled\n```\n\n```\ngo get github.com/marcboeker/go-duckdb\n```\n\n#  Blog \n[](https://duckdb.org/2025/03/28/using-duckdb-in-streamlit.html \"Using DuckDB in Streamlit\")\n![Using DuckDB in Streamlit](https://duckdb.org/images/blog/thumbs/duckdb-streamlit.svg)\nusing DuckDB\n###  Using DuckDB in Streamlit \n2025-03-28\nPetrica Leuca\n[](https://duckdb.org/2025/03/21/maximizing-your-delta-scan-performance.html \"Maximizing Your Delta Scan Performance in DuckDB\")\n![Maximizing Your Delta Scan Performance in DuckDB](https://duckdb.org/images/blog/thumbs/delta-lake-part-2.png)\nextensions\n###  Maximizing Your Delta Scan Performance in DuckDB \n2025-03-21\nSam Ansmink\n[ All blog posts ](https://duckdb.org/news)\nAggregation query Join query Read CSV files Read Parquet files from S3 Spatial extension\nSQL query Pandas integration Custom UDFs\nSQL query duckplyr dplyr integration\nSQL query Appender\nSQL query Web service integration\n```\n-- Get the top-3 busiest train stations\nSELECT\n  station_name,\n  count(*) AS num_services\nFROM train_services\nGROUP BY ALL\nORDER BY num_services DESC\nLIMIT 3;\n```\n\n```\n-- Load CSV file to a table. DuckDB auto-detects\n-- the CSV's format, column name and types\nCREATE TABLE stations AS\n  FROM 's3://duckdb-blobs/stations.csv';\n```\n\n```\n-- Directly query Parquet file in S3\nSELECT\n  station_name,\n  count(*) AS num_services\nFROM 's3://duckdb-blobs/train_services.parquet'\nGROUP BY ALL\nORDER BY num_services DESC\nLIMIT 10;\n```\n\n```\n-- Find the top-3 longest domestic train routes\nSELECT s1.name_short, s2.name_short, d.distance\nFROM distances d\nJOIN stations s1 ON d.station1 = s1.code\nJOIN stations s2 ON d.station2 = s2.code\nWHERE s1.country = s2.country\n AND s1.code < s2.code\nORDER BY distance DESC\nLIMIT 3;\n```\n\n```\n-- List the closest IC stations (as the crow flies)\nSELECT\n  s1.name_long AS station1,\n  s2.name_long AS station2,\n  ST_Distance(\n    ST_Point(s1.geo_lng, s1.geo_lat),\n    ST_Point(s2.geo_lng, s2.geo_lat)\n  ) * 111_139 AS distance\nFROM stations s1, stations s2\nWHERE s1.type LIKE '%Intercity%'\n AND s2.type LIKE '%Intercity%'\n AND s1.id < s2.id\nORDER BY distance ASC\nLIMIT 3;\n```\n\n```\n# Get the top-3 busiest train stations\nimport duckdb\nduckdb.sql(\"\"\"\n  SELECT station, count(*) AS num_services\n  FROM train_services\n  GROUP BY ALL\n  ORDER BY num_services DESC\n  LIMIT 3;\n  \"\"\")\n```\n\n```\n# Reading and writing Pandas dataframes\nimport pandas as pd\nimport duckdb\ndf_in = pd.DataFrame({\n  'station': ['Delft', 'Delft', 'Gouda', 'Gouda'],\n  'day': ['Mon', 'Tue', 'Mon', 'Tue'],\n  'num_services' : [22, 20, 27, 25]})\n# Run query on a dataframe and return a dataframe\ndf_out = duckdb.sql(\"\"\"\n  SELECT station, sum(num_services)\n  FROM df_in\n  GROUP BY station\n  \"\"\").to_df()\n```\n\n```\n# Create custom user-defined function\nimport duckdb\ndef plus_one(x):\n  return x + 1\ncon = duckdb.connect()\ncon.create_function('plus_one', plus_one,\n  ['BIGINT'], 'BIGINT', type='native')\ncon.sql(\"\"\"\n  SELECT sum(plus_one(i)) FROM range(10) tbl(i);\n  \"\"\")\n```\n\n```\n# Find the largest sepals/petals in the Iris data setlibrary(duckdb)con<-dbConnect(duckdb())duckdb_register(con,\"iris\",iris)query<-r'(\n  SELECT count(*) AS num_observations,\n  max(\"Sepal.Width\") AS max_width,\n  max(\"Petal.Length\") AS max_petal_length\n  FROM iris\n  WHERE \"Sepal.Length\" > 5\n  GROUP BY ALL\n  )'dbGetQuery(con,query)\n```\n\n```\n# Find the largest sepals/petals in the Iris data set# using duckplyrlibrary(\"duckplyr\")iris|>filter(Sepal.Length>5)|>group_by(Species)|>summarize(num_observations=n(),max_width=max(Sepal.Width),max_petal_length=max(Petal.Length),na.rm=TRUE)|>collect()\n```\n\n```\n# Find the largest sepals/petals in the Iris data set# using dplyrlibrary(\"duckdb\")library(\"dplyr\")con<-dbConnect(duckdb())duckdb_register(con,\"iris\",iris)tbl(con,\"iris\")|>filter(Sepal.Length>5)|>group_by(Species)|>summarize(num_observations=count(),max_width=max(Sepal.Width),max_petal_length=max(Petal.Length),na.rm=TRUE)|>collect()\n```\n\n```\n// Get a list of train stations by traffic\nConnection conn =\n  DriverManager.getConnection(\"jdbc:duckdb:\");\nStatement st = conn.createStatement();\nResultSet rs = st.executeQuery(\n  \"SELECT station_name,\\n\" +\n  \"    count(*) AS num_services\\n\" +\n  \"FROM train_services\\n\" +\n  \"GROUP BY ALL\\n\" +\n  \"ORDER BY num_services DESC;\");\nSystem.out.println(rs.next());\n```\n\n```\n// Perform bulk inserts using the Appender API\nDuckDBConnection conn = (DuckDBConnection)\n  DriverManager.getConnection(\"jdbc:duckdb:\");\nStatement st = conn.createStatement();\nst.execute(\"CREATE TABLE person \" +\n  \"(name VARCHAR, age INT)\");\nvar appender = conn.createAppender(\n  DuckDBConnection.DEFAULT_SCHEMA, \"person\");\nappender.beginRow();\nappender.append(\"MC Ducky\");\nappender.append(49);\nappender.endRow();\nappender.close();\n```\n\n```\n// Get the top-3 busiest train stations in May\nimport { DuckDBInstance } from '@duckdb/node-api';\nconst instance = await DuckDBInstance.create();\nconst connection = await instance.connect();\nconst reader = await connection.runAndReadAll(\n `SELECT station_name, count(*) AS num_services\n  FROM\n  'http://blobs.duckdb.org/train_services.parquet'\n  WHERE monthname(date) = 'May'\n  GROUP BY ALL\n  ORDER BY num_services DESC\n  LIMIT 3;`\n);\nconsole.table(reader.getRows());\n```\n\n```\n// Web Service Integration:\n// Create endpoint to generate numbers\nimport express from \"express\";\nimport { DuckDBInstance } from '@duckdb/node-api';\nconst app = express();\nconst instance = await DuckDBInstance.create();\nconst connection = await instance.connect();\napp.get(\"/getnumbers\", async (req, res) => {\n const reader = await connection.runAndReadAll(\n  \"SELECT random() AS num FROM range(10)\");\n res.end(JSON.stringify(reader.getRows()));\n});\napp.listen(8082, () => console.log(\n \"Go to: http://localhost:8082/getnumbers\"));\n```\n\n###### Documentation\n[Getting Started](https://duckdb.org/docs/stable/) [Installation](https://duckdb.org/docs/installation/) [Guides](https://duckdb.org/docs/stable/guides/overview.html) [Data Import](https://duckdb.org/docs/stable/data/overview.html) [Client APIs](https://duckdb.org/docs/stable/clients/overview.html) [SQL Introduction](https://duckdb.org/docs/stable/sql/introduction.html) [Why DuckDB](https://duckdb.org/why_duckdb.html) [FAQ](https://duckdb.org/faq.html)\n###### Resources\n[Blog](https://duckdb.org/news/) [Media](https://duckdb.org/media/) [Events](https://duckdb.org/events/) [Webshop](https://shop.duckdb.org/) [Code of Conduct](https://duckdb.org/code_of_conduct.html) [Trademark Use](https://duckdb.org/trademark_guidelines.html) [Release Calendar](https://duckdb.org/docs/stable/dev/release_calendar.html) [Development Roadmap](https://duckdb.org/docs/stable/dev/roadmap.html) [RSS Feed](https://duckdb.org/feed.xml) [Status Page](https://status.duckdb.org/)\n###### Organizations\n[DuckDB Foundation](https://duckdb.org/foundation/) [DuckDB Labs](https://duckdblabs.com/)\n###### Community\n[Community Extensions](https://duckdb.org/community_extensions/) [Bluesky](https://bsky.app/profile/duckdb.org) [LinkedIn](https://www.linkedin.com/company/duckdb/posts) [X (Twitter)](https://twitter.com/duckdb) [Discord](https://discord.duckdb.org) [Stack Overflow](https://stackoverflow.com/questions/tagged/duckdb)\nÂ© 2025 DuckDB Foundation, Amsterdam NL\n",
    "content_quality_score": 0.8,
    "summary": null,
    "child_urls": [
        "https://duckdb.org/",
        "https://duckdb.org/docs/",
        "https://duckdb.org/docs",
        "https://duckdb.org/docs/installation/",
        "https://duckdb.org/docs/guides/index",
        "https://duckdb.org/docs/data/overview",
        "https://duckdb.org/docs/api/overview",
        "https://duckdb.org/docs/sql/introduction",
        "https://duckdb.org/why_duckdb",
        "https://duckdb.org/faq",
        "https://duckdb.org/news/",
        "https://duckdb.org/media/",
        "https://duckdb.org/events/",
        "https://shop.duckdb.org/",
        "https://duckdb.org/#quickinstall",
        "https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count(*)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~",
        "https://duckdb.org/docs/installation",
        "https://duckdb.org/why_duckdb#simple",
        "https://duckdb.org/docs/stable/clients/overview",
        "https://duckdb.org/why_duckdb#portable",
        "https://duckdb.org/docs/stable/sql/introduction",
        "https://duckdb.org/why_duckdb#feature-rich",
        "https://duckdb.org/why_duckdb#fast",
        "https://duckdb.org/why_duckdb#extensible",
        "https://duckdb.org/foundation",
        "https://duckdb.org/why_duckdb#free",
        "https://duckdb.org/2025/03/28/using-duckdb-in-streamlit.html",
        "https://duckdb.org/2025/03/21/maximizing-your-delta-scan-performance.html",
        "https://duckdb.org/news",
        "https://duckdb.org/docs/stable/",
        "https://duckdb.org/docs/stable/guides/overview.html",
        "https://duckdb.org/docs/stable/data/overview.html",
        "https://duckdb.org/docs/stable/clients/overview.html",
        "https://duckdb.org/docs/stable/sql/introduction.html",
        "https://duckdb.org/why_duckdb.html",
        "https://duckdb.org/faq.html",
        "https://duckdb.org/code_of_conduct.html",
        "https://duckdb.org/trademark_guidelines.html",
        "https://duckdb.org/docs/stable/dev/release_calendar.html",
        "https://duckdb.org/docs/stable/dev/roadmap.html",
        "https://duckdb.org/feed.xml",
        "https://status.duckdb.org/",
        "https://duckdb.org/foundation/",
        "https://duckdb.org/community_extensions/",
        "https://discord.duckdb.org",
        "https://github.com/duckdb/duckdb",
        "https://duckdblabs.com/#support",
        "https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip",
        "https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/odbc-osx-universal.zip",
        "https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/duckdb_odbc-linux-amd64.zip",
        "https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/duckdb_odbc-windows-amd64.zip",
        "https://duckdblabs.com/",
        "https://bsky.app/profile/duckdb.org",
        "https://www.linkedin.com/company/duckdb/posts",
        "https://twitter.com/duckdb",
        "https://stackoverflow.com/questions/tagged/duckdb"
    ]
}