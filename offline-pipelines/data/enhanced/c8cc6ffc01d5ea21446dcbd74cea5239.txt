[Skip to content](https://github.com/huggingface/text-generation-inference/#start-of-content)
## Navigation Menu
Toggle navigation
[ ](https://github.com/)
[ Sign in ](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference%2F)
  * Product 
    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)
Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)
  * Solutions 
By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](https://github.com/solutions/industry/nonprofits)
By use case
    * [ DevSecOps ](https://github.com/solutions/use-case/devsecops)
    * [ DevOps ](https://github.com/solutions/use-case/devops)
    * [ CI/CD ](https://github.com/solutions/use-case/ci-cd)
    * [ View all use cases ](https://github.com/solutions/use-case)
By industry
    * [ Healthcare ](https://github.com/solutions/industry/healthcare)
    * [ Financial services ](https://github.com/solutions/industry/financial-services)
    * [ Manufacturing ](https://github.com/solutions/industry/manufacturing)
    * [ Government ](https://github.com/solutions/industry/government)
    * [ View all industries ](https://github.com/solutions/industry)
[ View all solutions ](https://github.com/solutions)
  * Resources 
Topics
    * [ AI ](https://github.com/resources/articles/ai)
    * [ DevOps ](https://github.com/resources/articles/devops)
    * [ Security ](https://github.com/resources/articles/security)
    * [ Software Development ](https://github.com/resources/articles/software-development)
    * [ View all ](https://github.com/resources/articles)
Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ Events & Webinars ](https://resources.github.com)
    * [ Ebooks & Whitepapers ](https://github.com/resources/whitepapers)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)
  * Open Source 
    * [ GitHub Sponsors Fund open source developers  ](https://github.com/sponsors)
    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)
Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)
  * Enterprise 
    * [ Enterprise platform AI-powered developer platform  ](https://github.com/enterprise)
Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ Copilot for business Enterprise-grade AI features  ](https://github.com/features/copilot/copilot-business)
    * [ Premium Support Enterprise-grade 24/7 support  ](https://github.com/premium-support)
  * [Pricing](https://github.com/pricing)


Search or jump to...
# Search code, repositories, users, issues, pull requests...
Search 
Clear
[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)
#  Provide feedback 
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel  Submit feedback 
#  Saved searches 
## Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 
Cancel  Create saved search 
[ Sign in ](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference%2F)
[ Sign up ](https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=huggingface%2Ftext-generation-inference) Reseting focus
You signed in with another tab or window. [Reload](https://github.com/huggingface/text-generation-inference/) to refresh your session. You signed out in another tab or window. [Reload](https://github.com/huggingface/text-generation-inference/) to refresh your session. You switched accounts on another tab or window. [Reload](https://github.com/huggingface/text-generation-inference/) to refresh your session. Dismiss alert
{{ message }}
[ huggingface ](https://github.com/huggingface) / **[text-generation-inference](https://github.com/huggingface/text-generation-inference) ** Public
  * [ Notifications ](https://github.com/login?return_to=%2Fhuggingface%2Ftext-generation-inference) You must be signed in to change notification settings
  * [ Fork 1.2k ](https://github.com/login?return_to=%2Fhuggingface%2Ftext-generation-inference)
  * [ Star  9.9k ](https://github.com/login?return_to=%2Fhuggingface%2Ftext-generation-inference)


Large Language Model Text Generation Inference 
[hf.co/docs/text-generation-inference](http://hf.co/docs/text-generation-inference "http://hf.co/docs/text-generation-inference")
### License
[ Apache-2.0 license ](https://github.com/huggingface/text-generation-inference/blob/main/LICENSE)
[ 9.9k stars ](https://github.com/huggingface/text-generation-inference/stargazers) [ 1.2k forks ](https://github.com/huggingface/text-generation-inference/forks) [ Branches ](https://github.com/huggingface/text-generation-inference/branches) [ Tags ](https://github.com/huggingface/text-generation-inference/tags) [ Activity ](https://github.com/huggingface/text-generation-inference/activity)
[ Star  ](https://github.com/login?return_to=%2Fhuggingface%2Ftext-generation-inference)
[ Notifications ](https://github.com/login?return_to=%2Fhuggingface%2Ftext-generation-inference) You must be signed in to change notification settings
  * [ Code ](https://github.com/huggingface/text-generation-inference)
  * [ Issues 224 ](https://github.com/huggingface/text-generation-inference/issues)
  * [ Pull requests 23 ](https://github.com/huggingface/text-generation-inference/pulls)
  * [ Discussions ](https://github.com/huggingface/text-generation-inference/discussions)
  * [ Actions ](https://github.com/huggingface/text-generation-inference/actions)
  * [ Security ](https://github.com/huggingface/text-generation-inference/security)
  * [ Insights ](https://github.com/huggingface/text-generation-inference/pulse)


Additional navigation options
  * [ Code  ](https://github.com/huggingface/text-generation-inference)
  * [ Issues  ](https://github.com/huggingface/text-generation-inference/issues)
  * [ Pull requests  ](https://github.com/huggingface/text-generation-inference/pulls)
  * [ Discussions  ](https://github.com/huggingface/text-generation-inference/discussions)
  * [ Actions  ](https://github.com/huggingface/text-generation-inference/actions)
  * [ Security  ](https://github.com/huggingface/text-generation-inference/security)
  * [ Insights  ](https://github.com/huggingface/text-generation-inference/pulse)


# huggingface/text-generation-inference
main
[Branches](https://github.com/huggingface/text-generation-inference/branches)[Tags](https://github.com/huggingface/text-generation-inference/tags)
[](https://github.com/huggingface/text-generation-inference/branches)[](https://github.com/huggingface/text-generation-inference/tags)
Go to file
Code
## Folders and files
Name| Name| Last commit message| Last commit date  
---|---|---|---  
## Latest commit
## History
[1,346 Commits](https://github.com/huggingface/text-generation-inference/commits/main/)[](https://github.com/huggingface/text-generation-inference/commits/main/)  
[.github](https://github.com/huggingface/text-generation-inference/tree/main/.github ".github")| [.github](https://github.com/huggingface/text-generation-inference/tree/main/.github ".github")  
[assets](https://github.com/huggingface/text-generation-inference/tree/main/assets "assets")| [assets](https://github.com/huggingface/text-generation-inference/tree/main/assets "assets")  
[backends](https://github.com/huggingface/text-generation-inference/tree/main/backends "backends")| [backends](https://github.com/huggingface/text-generation-inference/tree/main/backends "backends")  
[benchmark](https://github.com/huggingface/text-generation-inference/tree/main/benchmark "benchmark")| [benchmark](https://github.com/huggingface/text-generation-inference/tree/main/benchmark "benchmark")  
[clients/python](https://github.com/huggingface/text-generation-inference/tree/main/clients/python "This path skips through empty directories")| [clients/python](https://github.com/huggingface/text-generation-inference/tree/main/clients/python "This path skips through empty directories")  
[docs](https://github.com/huggingface/text-generation-inference/tree/main/docs "docs")| [docs](https://github.com/huggingface/text-generation-inference/tree/main/docs "docs")  
[integration-tests](https://github.com/huggingface/text-generation-inference/tree/main/integration-tests "integration-tests")| [integration-tests](https://github.com/huggingface/text-generation-inference/tree/main/integration-tests "integration-tests")  
[launcher](https://github.com/huggingface/text-generation-inference/tree/main/launcher "launcher")| [launcher](https://github.com/huggingface/text-generation-inference/tree/main/launcher "launcher")  
[load_tests](https://github.com/huggingface/text-generation-inference/tree/main/load_tests "load_tests")| [load_tests](https://github.com/huggingface/text-generation-inference/tree/main/load_tests "load_tests")  
[nix](https://github.com/huggingface/text-generation-inference/tree/main/nix "nix")| [nix](https://github.com/huggingface/text-generation-inference/tree/main/nix "nix")  
[proto](https://github.com/huggingface/text-generation-inference/tree/main/proto "proto")| [proto](https://github.com/huggingface/text-generation-inference/tree/main/proto "proto")  
[router](https://github.com/huggingface/text-generation-inference/tree/main/router "router")| [router](https://github.com/huggingface/text-generation-inference/tree/main/router "router")  
[server](https://github.com/huggingface/text-generation-inference/tree/main/server "server")| [server](https://github.com/huggingface/text-generation-inference/tree/main/server "server")  
[.dockerignore](https://github.com/huggingface/text-generation-inference/blob/main/.dockerignore ".dockerignore")| [.dockerignore](https://github.com/huggingface/text-generation-inference/blob/main/.dockerignore ".dockerignore")  
[.gitignore](https://github.com/huggingface/text-generation-inference/blob/main/.gitignore ".gitignore")| [.gitignore](https://github.com/huggingface/text-generation-inference/blob/main/.gitignore ".gitignore")  
[.pre-commit-config.yaml](https://github.com/huggingface/text-generation-inference/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")| [.pre-commit-config.yaml](https://github.com/huggingface/text-generation-inference/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")  
[.redocly.lint-ignore.yaml](https://github.com/huggingface/text-generation-inference/blob/main/.redocly.lint-ignore.yaml ".redocly.lint-ignore.yaml")| [.redocly.lint-ignore.yaml](https://github.com/huggingface/text-generation-inference/blob/main/.redocly.lint-ignore.yaml ".redocly.lint-ignore.yaml")  
[CODE_OF_CONDUCT.md](https://github.com/huggingface/text-generation-inference/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [CODE_OF_CONDUCT.md](https://github.com/huggingface/text-generation-inference/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")  
[CONTRIBUTING.md](https://github.com/huggingface/text-generation-inference/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](https://github.com/huggingface/text-generation-inference/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Cargo.lock](https://github.com/huggingface/text-generation-inference/blob/main/Cargo.lock "Cargo.lock")| [Cargo.lock](https://github.com/huggingface/text-generation-inference/blob/main/Cargo.lock "Cargo.lock")  
[Cargo.toml](https://github.com/huggingface/text-generation-inference/blob/main/Cargo.toml "Cargo.toml")| [Cargo.toml](https://github.com/huggingface/text-generation-inference/blob/main/Cargo.toml "Cargo.toml")  
[Dockerfile](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile "Dockerfile")| [Dockerfile](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile "Dockerfile")  
[Dockerfile.neuron](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile.neuron "Dockerfile.neuron")| [Dockerfile.neuron](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile.neuron "Dockerfile.neuron")  
[Dockerfile.nix](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile.nix "Dockerfile.nix")| [Dockerfile.nix](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile.nix "Dockerfile.nix")  
[Dockerfile_amd](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_amd "Dockerfile_amd")| [Dockerfile_amd](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_amd "Dockerfile_amd")  
[Dockerfile_gaudi](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_gaudi "Dockerfile_gaudi")| [Dockerfile_gaudi](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_gaudi "Dockerfile_gaudi")  
[Dockerfile_intel](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_intel "Dockerfile_intel")| [Dockerfile_intel](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_intel "Dockerfile_intel")  
[Dockerfile_llamacpp](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_llamacpp "Dockerfile_llamacpp")| [Dockerfile_llamacpp](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_llamacpp "Dockerfile_llamacpp")  
[Dockerfile_trtllm](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_trtllm "Dockerfile_trtllm")| [Dockerfile_trtllm](https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_trtllm "Dockerfile_trtllm")  
[LICENSE](https://github.com/huggingface/text-generation-inference/blob/main/LICENSE "LICENSE")| [LICENSE](https://github.com/huggingface/text-generation-inference/blob/main/LICENSE "LICENSE")  
[Makefile](https://github.com/huggingface/text-generation-inference/blob/main/Makefile "Makefile")| [Makefile](https://github.com/huggingface/text-generation-inference/blob/main/Makefile "Makefile")  
[README.md](https://github.com/huggingface/text-generation-inference/blob/main/README.md "README.md")| [README.md](https://github.com/huggingface/text-generation-inference/blob/main/README.md "README.md")  
[crate-hashes.json](https://github.com/huggingface/text-generation-inference/blob/main/crate-hashes.json "crate-hashes.json")| [crate-hashes.json](https://github.com/huggingface/text-generation-inference/blob/main/crate-hashes.json "crate-hashes.json")  
[flake.lock](https://github.com/huggingface/text-generation-inference/blob/main/flake.lock "flake.lock")| [flake.lock](https://github.com/huggingface/text-generation-inference/blob/main/flake.lock "flake.lock")  
[flake.nix](https://github.com/huggingface/text-generation-inference/blob/main/flake.nix "flake.nix")| [flake.nix](https://github.com/huggingface/text-generation-inference/blob/main/flake.nix "flake.nix")  
[rust-toolchain.toml](https://github.com/huggingface/text-generation-inference/blob/main/rust-toolchain.toml "rust-toolchain.toml")| [rust-toolchain.toml](https://github.com/huggingface/text-generation-inference/blob/main/rust-toolchain.toml "rust-toolchain.toml")  
[sagemaker-entrypoint.sh](https://github.com/huggingface/text-generation-inference/blob/main/sagemaker-entrypoint.sh "sagemaker-entrypoint.sh")| [sagemaker-entrypoint.sh](https://github.com/huggingface/text-generation-inference/blob/main/sagemaker-entrypoint.sh "sagemaker-entrypoint.sh")  
[tgi-entrypoint.sh](https://github.com/huggingface/text-generation-inference/blob/main/tgi-entrypoint.sh "tgi-entrypoint.sh")| [tgi-entrypoint.sh](https://github.com/huggingface/text-generation-inference/blob/main/tgi-entrypoint.sh "tgi-entrypoint.sh")  
[update_doc.py](https://github.com/huggingface/text-generation-inference/blob/main/update_doc.py "update_doc.py")| [update_doc.py](https://github.com/huggingface/text-generation-inference/blob/main/update_doc.py "update_doc.py")  
View all files  
## Repository files navigation
  * [README](https://github.com/huggingface/text-generation-inference/)
  * [Code of conduct](https://github.com/huggingface/text-generation-inference/)
  * [Apache-2.0 license](https://github.com/huggingface/text-generation-inference/)


[ ![Making TGI deployment optimal](https://camo.githubusercontent.com/816a23feff65e234bf4393d453a7b3c8d24092f8630c2ed131b8b500ddb16dc1/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f4e617273696c2f7467695f6173736574732f7265736f6c76652f6d61696e2f7468756d626e61696c2e706e67) ](https://www.youtube.com/watch?v=jlMAX2Oaht0)
# Text Generation Inference
[](https://github.com/huggingface/text-generation-inference/#text-generation-inference)
[ ![GitHub Repo stars](https://camo.githubusercontent.com/afaad1cd3eb9f616fa5f8764f047603f53587984b922c9198ec1ab2895d9aae1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f68756767696e67666163652f746578742d67656e65726174696f6e2d696e666572656e63653f7374796c653d736f6369616c) ](https://github.com/huggingface/text-generation-inference) [ ![Swagger API documentation](https://camo.githubusercontent.com/f0fe98e6afc151ec5523b758b023431bacb2de779486f7488953b503f5643b88/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4150492d537761676765722d696e666f726d6174696f6e616c) ](https://huggingface.github.io/text-generation-inference)
A Rust, Python and gRPC server for text generation inference. Used in production at [Hugging Face](https://huggingface.co) to power Hugging Chat, the Inference API and Inference Endpoint.
## Table of contents
[](https://github.com/huggingface/text-generation-inference/#table-of-contents)
  * [Get Started](https://github.com/huggingface/text-generation-inference/#get-started)
    * [Docker](https://github.com/huggingface/text-generation-inference/#docker)
    * [API documentation](https://github.com/huggingface/text-generation-inference/#api-documentation)
    * [Using a private or gated model](https://github.com/huggingface/text-generation-inference/#using-a-private-or-gated-model)
    * [A note on Shared Memory (shm)](https://github.com/huggingface/text-generation-inference/#a-note-on-shared-memory-shm)
    * [Distributed Tracing](https://github.com/huggingface/text-generation-inference/#distributed-tracing)
    * [Architecture](https://github.com/huggingface/text-generation-inference/#architecture)
    * [Local install](https://github.com/huggingface/text-generation-inference/#local-install)
    * [Local install (Nix)](https://github.com/huggingface/text-generation-inference/#local-install-nix)
  * [Optimized architectures](https://github.com/huggingface/text-generation-inference/#optimized-architectures)
  * [Run locally](https://github.com/huggingface/text-generation-inference/#run-locally)
    * [Run](https://github.com/huggingface/text-generation-inference/#run)
    * [Quantization](https://github.com/huggingface/text-generation-inference/#quantization)
  * [Develop](https://github.com/huggingface/text-generation-inference/#develop)
  * [Testing](https://github.com/huggingface/text-generation-inference/#testing)


Text Generation Inference (TGI) is a toolkit for deploying and serving Large Language Models (LLMs). TGI enables high-performance text generation for the most popular open-source LLMs, including Llama, Falcon, StarCoder, BLOOM, GPT-NeoX, and [more](https://huggingface.co/docs/text-generation-inference/supported_models). TGI implements many features, such as:
  * Simple launcher to serve most popular LLMs
  * Production ready (distributed tracing with Open Telemetry, Prometheus metrics)
  * Tensor Parallelism for faster inference on multiple GPUs
  * Token streaming using Server-Sent Events (SSE)
  * Continuous batching of incoming requests for increased total throughput
  * [Messages API](https://huggingface.co/docs/text-generation-inference/en/messages_api) compatible with Open AI Chat Completion API
  * Optimized transformers code for inference using [Flash Attention](https://github.com/HazyResearch/flash-attention) and [Paged Attention](https://github.com/vllm-project/vllm) on the most popular architectures
  * Quantization with : 
    * [bitsandbytes](https://github.com/TimDettmers/bitsandbytes)
    * [GPT-Q](https://arxiv.org/abs/2210.17323)
    * [EETQ](https://github.com/NetEase-FuXi/EETQ)
    * [AWQ](https://github.com/casper-hansen/AutoAWQ)
    * [Marlin](https://github.com/IST-DASLab/marlin)
    * [fp8](https://developer.nvidia.com/blog/nvidia-arm-and-intel-publish-fp8-specification-for-standardization-as-an-interchange-format-for-ai/)
  * [Safetensors](https://github.com/huggingface/safetensors) weight loading
  * Watermarking with [A Watermark for Large Language Models](https://arxiv.org/abs/2301.10226)
  * Logits warper (temperature scaling, top-p, top-k, repetition penalty, more details see [transformers.LogitsProcessor](https://huggingface.co/docs/transformers/internal/generation_utils#transformers.LogitsProcessor))
  * Stop sequences
  * Log probabilities
  * [Speculation](https://huggingface.co/docs/text-generation-inference/conceptual/speculation) ~2x latency
  * [Guidance/JSON](https://huggingface.co/docs/text-generation-inference/conceptual/guidance). Specify output format to speed up inference and make sure the output is valid according to some specs..
  * Custom Prompt Generation: Easily generate text by providing custom prompts to guide the model's output
  * Fine-tuning Support: Utilize fine-tuned models for specific tasks to achieve higher accuracy and performance


### Hardware support
[](https://github.com/huggingface/text-generation-inference/#hardware-support)
  * [Nvidia](https://github.com/huggingface/text-generation-inference/pkgs/container/text-generation-inference)
  * [AMD](https://github.com/huggingface/text-generation-inference/pkgs/container/text-generation-inference) (-rocm)
  * [Inferentia](https://github.com/huggingface/optimum-neuron/tree/main/text-generation-inference)
  * [Intel GPU](https://github.com/huggingface/text-generation-inference/pull/1475)
  * [Gaudi](https://github.com/huggingface/tgi-gaudi)
  * [Google TPU](https://huggingface.co/docs/optimum-tpu/howto/serving)


## Get Started
[](https://github.com/huggingface/text-generation-inference/#get-started)
### Docker
[](https://github.com/huggingface/text-generation-inference/#docker)
For a detailed starting guide, please see the [Quick Tour](https://huggingface.co/docs/text-generation-inference/quicktour). The easiest way of getting started is using the official Docker container:
```
model=HuggingFaceH4/zephyr-7b-beta
# share a volume with the Docker container to avoid downloading weights every run
volume=$PWD/data
docker run --gpus all --shm-size 1g -p 8080:80 -v $volume:/data \
  ghcr.io/huggingface/text-generation-inference:3.2.1 --model-id $model
```

And then you can make requests like
```
curl 127.0.0.1:8080/generate_stream \
  -X POST \
  -d '{"inputs":"What is Deep Learning?","parameters":{"max_new_tokens":20}}' \
  -H 'Content-Type: application/json'
```

You can also use [TGI's Messages API](https://huggingface.co/docs/text-generation-inference/en/messages_api) to obtain Open AI Chat Completion API compatible responses.
```
curl localhost:8080/v1/chat/completions \
  -X POST \
  -d '{
 "model": "tgi",
 "messages": [
  {
   "role": "system",
   "content": "You are a helpful assistant."
  },
  {
   "role": "user",
   "content": "What is deep learning?"
  }
 ],
 "stream": true,
 "max_tokens": 20
}' \
  -H 'Content-Type: application/json'
```

**Note:** To use NVIDIA GPUs, you need to install the [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html). We also recommend using NVIDIA drivers with CUDA version 12.2 or higher. For running the Docker container on a machine with no GPUs or CUDA support, it is enough to remove the `--gpus all` flag and add `--disable-custom-kernels`, please note CPU is not the intended platform for this project, so performance might be subpar.
**Note:** TGI supports AMD Instinct MI210 and MI250 GPUs. Details can be found in the [Supported Hardware documentation](https://huggingface.co/docs/text-generation-inference/installation_amd#using-tgi-with-amd-gpus). To use AMD GPUs, please use `docker run --device /dev/kfd --device /dev/dri --shm-size 1g -p 8080:80 -v $volume:/data ghcr.io/huggingface/text-generation-inference:3.2.1-rocm --model-id $model` instead of the command above.
To see all options to serve your models (in the [code](https://github.com/huggingface/text-generation-inference/blob/main/launcher/src/main.rs) or in the cli):
```
text-generation-launcher --help

```

### API documentation
[](https://github.com/huggingface/text-generation-inference/#api-documentation)
You can consult the OpenAPI documentation of the `text-generation-inference` REST API using the `/docs` route. The Swagger UI is also available at: <https://huggingface.github.io/text-generation-inference>.
### Using a private or gated model
[](https://github.com/huggingface/text-generation-inference/#using-a-private-or-gated-model)
You have the option to utilize the `HF_TOKEN` environment variable for configuring the token employed by `text-generation-inference`. This allows you to gain access to protected resources.
For example, if you want to serve the gated Llama V2 model variants:
  1. Go to <https://huggingface.co/settings/tokens>
  2. Copy your CLI READ token
  3. Export `HF_TOKEN=<your CLI READ token>`


or with Docker:
```
model=meta-llama/Meta-Llama-3.1-8B-Instruct
volume=$PWD/data # share a volume with the Docker container to avoid downloading weights every run
token=<your cli READ token>
docker run --gpus all --shm-size 1g -e HF_TOKEN=$token -p 8080:80 -v $volume:/data \
  ghcr.io/huggingface/text-generation-inference:3.2.1 --model-id $model
```

### A note on Shared Memory (shm)
[](https://github.com/huggingface/text-generation-inference/#a-note-on-shared-memory-shm)
[`NCCL`](https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/index.html) is a communication framework used by `PyTorch` to do distributed training/inference. `text-generation-inference` makes use of `NCCL` to enable Tensor Parallelism to dramatically speed up inference for large language models.
In order to share data between the different devices of a `NCCL` group, `NCCL` might fall back to using the host memory if peer-to-peer using NVLink or PCI is not possible.
To allow the container to use 1G of Shared Memory and support SHM sharing, we add `--shm-size 1g` on the above command.
If you are running `text-generation-inference` inside `Kubernetes`. You can also add Shared Memory to the container by creating a volume with:
```
- name: shm
 emptyDir:
  medium: Memory
  sizeLimit: 1Gi
```

and mounting it to `/dev/shm`.
Finally, you can also disable SHM sharing by using the `NCCL_SHM_DISABLE=1` environment variable. However, note that this will impact performance.
### Distributed Tracing
[](https://github.com/huggingface/text-generation-inference/#distributed-tracing)
`text-generation-inference` is instrumented with distributed tracing using OpenTelemetry. You can use this feature by setting the address to an OTLP collector with the `--otlp-endpoint` argument. The default service name can be overridden with the `--otlp-service-name` argument
### Architecture
[](https://github.com/huggingface/text-generation-inference/#architecture)
[![TGI architecture](https://camo.githubusercontent.com/865b15b83e926b08c3ce2ad186519ad520bce2241b89095edcf7416d2be91aba/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f68756767696e67666163652f646f63756d656e746174696f6e2d696d616765732f7265736f6c76652f6d61696e2f5447492e706e67)](https://camo.githubusercontent.com/865b15b83e926b08c3ce2ad186519ad520bce2241b89095edcf7416d2be91aba/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f68756767696e67666163652f646f63756d656e746174696f6e2d696d616765732f7265736f6c76652f6d61696e2f5447492e706e67)
Detailed blogpost by Adyen on TGI inner workings: [LLM inference at scale with TGI (Martin Iglesias Goyanes - Adyen, 2024)](https://www.adyen.com/knowledge-hub/llm-inference-at-scale-with-tgi)
### Local install
[](https://github.com/huggingface/text-generation-inference/#local-install)
You can also opt to install `text-generation-inference` locally.
First clone the repository and change directory into it:
```
git clone https://github.com/huggingface/text-generation-inference
cd text-generation-inference
```

Then [install Rust](https://rustup.rs/) and create a Python virtual environment with at least Python 3.9, e.g. using `conda` or `python venv`:
```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#using conda
conda create -n text-generation-inference python=3.11
conda activate text-generation-inference
#using python venv
python3 -m venv .venv
source .venv/bin/activate
```

You may also need to install Protoc.
On Linux:
```
PROTOC_ZIP=protoc-21.12-linux-x86_64.zip
curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/$PROTOC_ZIP
sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
rm -f $PROTOC_ZIP
```

On MacOS, using Homebrew:
```
brew install protobuf
```

Then run:
```
BUILD_EXTENSIONS=True make install # Install repository and HF/transformer fork with CUDA kernels
text-generation-launcher --model-id mistralai/Mistral-7B-Instruct-v0.2
```

**Note:** on some machines, you may also need the OpenSSL libraries and gcc. On Linux machines, run:
```
sudo apt-get install libssl-dev gcc -y
```

### Local install (Nix)
[](https://github.com/huggingface/text-generation-inference/#local-install-nix)
Another option is to install `text-generation-inference` locally using [Nix](https://nixos.org). Currently, we only support Nix on x86_64 Linux with CUDA GPUs. When using Nix, all dependencies can be pulled from a binary cache, removing the need to build them locally.
First follow the instructions to [install Cachix and enable the TGI cache](https://app.cachix.org/cache/text-generation-inference). Setting up the cache is important, otherwise Nix will build many of the dependencies locally, which can take hours.
After that you can run TGI with `nix run`:
```
cd text-generation-inference
nix run --extra-experimental-features nix-command --extra-experimental-features flakes . -- --model-id meta-llama/Llama-3.1-8B-Instruct
```

**Note:** when you are using Nix on a non-NixOS system, you have to [make some symlinks](https://danieldk.eu/Nix-CUDA-on-non-NixOS-systems#make-runopengl-driverlib-and-symlink-the-driver-library) to make the CUDA driver libraries visible to Nix packages.
For TGI development, you can use the `impure` dev shell:
```
nix develop .#impure
# Only needed the first time the devshell is started or after updating the protobuf.
(
cd server
mkdir text_generation_server/pb || true
python -m grpc_tools.protoc -I../proto/v3 --python_out=text_generation_server/pb \
    --grpc_python_out=text_generation_server/pb --mypy_out=text_generation_server/pb ../proto/v3/generate.proto
find text_generation_server/pb/ -type f -name "*.py" -print0 -exec sed -i -e 's/^\(import.*pb2\)/from . \1/g' {} \;
touch text_generation_server/pb/__init__.py
)
```

All development dependencies (cargo, Python, Torch), etc. are available in this dev shell.
## Optimized architectures
[](https://github.com/huggingface/text-generation-inference/#optimized-architectures)
TGI works out of the box to serve optimized models for all modern models. They can be found in [this list](https://huggingface.co/docs/text-generation-inference/supported_models).
Other architectures are supported on a best-effort basis using:
`AutoModelForCausalLM.from_pretrained(<model>, device_map="auto")`
or
`AutoModelForSeq2SeqLM.from_pretrained(<model>, device_map="auto")`
## Run locally
[](https://github.com/huggingface/text-generation-inference/#run-locally)
### Run
[](https://github.com/huggingface/text-generation-inference/#run)
```
text-generation-launcher --model-id mistralai/Mistral-7B-Instruct-v0.2
```

### Quantization
[](https://github.com/huggingface/text-generation-inference/#quantization)
You can also run pre-quantized weights (AWQ, GPTQ, Marlin) or on-the-fly quantize weights with bitsandbytes, EETQ, fp8, to reduce the VRAM requirement:
```
text-generation-launcher --model-id mistralai/Mistral-7B-Instruct-v0.2 --quantize
```

4bit quantization is available using the [NF4 and FP4 data types from bitsandbytes](https://arxiv.org/pdf/2305.14314.pdf). It can be enabled by providing `--quantize bitsandbytes-nf4` or `--quantize bitsandbytes-fp4` as a command line argument to `text-generation-launcher`.
Read more about quantization in the [Quantization documentation](https://huggingface.co/docs/text-generation-inference/en/conceptual/quantization).
## Develop
[](https://github.com/huggingface/text-generation-inference/#develop)
```
make server-dev
make router-dev
```

## Testing
[](https://github.com/huggingface/text-generation-inference/#testing)
```
# python
make python-server-tests
make python-client-tests
# or both server and client tests
make python-tests
# rust cargo tests
make rust-tests
# integration tests
make integration-tests
```

## About
Large Language Model Text Generation Inference 
[hf.co/docs/text-generation-inference](http://hf.co/docs/text-generation-inference "http://hf.co/docs/text-generation-inference")
### Topics
[ nlp ](https://github.com/topics/nlp "Topic: nlp") [ bloom ](https://github.com/topics/bloom "Topic: bloom") [ deep-learning ](https://github.com/topics/deep-learning "Topic: deep-learning") [ inference ](https://github.com/topics/inference "Topic: inference") [ pytorch ](https://github.com/topics/pytorch "Topic: pytorch") [ falcon ](https://github.com/topics/falcon "Topic: falcon") [ transformer ](https://github.com/topics/transformer "Topic: transformer") [ gpt ](https://github.com/topics/gpt "Topic: gpt") [ starcoder ](https://github.com/topics/starcoder "Topic: starcoder")
### Resources
[ Readme ](https://github.com/huggingface/text-generation-inference/#readme-ov-file)
### License
[ Apache-2.0 license ](https://github.com/huggingface/text-generation-inference/#Apache-2.0-1-ov-file)
### Code of conduct
[ Code of conduct ](https://github.com/huggingface/text-generation-inference/#coc-ov-file)
[ Activity](https://github.com/huggingface/text-generation-inference/activity)
[ Custom properties](https://github.com/huggingface/text-generation-inference/custom-properties)
### Stars
[ **9.9k** stars](https://github.com/huggingface/text-generation-inference/stargazers)
### Watchers
[ **104** watching](https://github.com/huggingface/text-generation-inference/watchers)
### Forks
[ **1.2k** forks](https://github.com/huggingface/text-generation-inference/forks)
[ Report repository ](https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference&report=huggingface+%28user%29)
##  [Releases 57](https://github.com/huggingface/text-generation-inference/releases)
[ v3.2.1 Latest  Mar 18, 2025 ](https://github.com/huggingface/text-generation-inference/releases/tag/v3.2.1)
[+ 56 releases](https://github.com/huggingface/text-generation-inference/releases)
##  [Packages 0](https://github.com/orgs/huggingface/packages?repo_name=text-generation-inference)
##  [Contributors 162](https://github.com/huggingface/text-generation-inference/graphs/contributors)
  * [ ![@Narsil](https://avatars.githubusercontent.com/u/204321?s=64&v=4) ](https://github.com/Narsil)
  * [ ![@OlivierDehaene](https://avatars.githubusercontent.com/u/23298448?s=64&v=4) ](https://github.com/OlivierDehaene)
  * [ ![@danieldk](https://avatars.githubusercontent.com/u/49398?s=64&v=4) ](https://github.com/danieldk)
  * [ ![@drbh](https://avatars.githubusercontent.com/u/9896130?s=64&v=4) ](https://github.com/drbh)
  * [ ![@sywangyi](https://avatars.githubusercontent.com/u/36058628?s=64&v=4) ](https://github.com/sywangyi)
  * [ ![@osanseviero](https://avatars.githubusercontent.com/u/7246357?s=64&v=4) ](https://github.com/osanseviero)
  * [ ![@fxmarty](https://avatars.githubusercontent.com/u/9808326?s=64&v=4) ](https://github.com/fxmarty)
  * [ ![@njhill](https://avatars.githubusercontent.com/u/16958488?s=64&v=4) ](https://github.com/njhill)
  * [ ![@mfuntowicz](https://avatars.githubusercontent.com/u/2241520?s=64&v=4) ](https://github.com/mfuntowicz)
  * [ ![@merveenoyan](https://avatars.githubusercontent.com/u/53175384?s=64&v=4) ](https://github.com/merveenoyan)
  * [ ![@Hugoch](https://avatars.githubusercontent.com/u/733386?s=64&v=4) ](https://github.com/Hugoch)
  * [ ![@mht-sharma](https://avatars.githubusercontent.com/u/21088122?s=64&v=4) ](https://github.com/mht-sharma)
  * [ ![@Wauplin](https://avatars.githubusercontent.com/u/11801849?s=64&v=4) ](https://github.com/Wauplin)
  * [ ![@alvarobartt](https://avatars.githubusercontent.com/u/36760800?s=64&v=4) ](https://github.com/alvarobartt)


[+ 148 contributors](https://github.com/huggingface/text-generation-inference/graphs/contributors)
## Languages
  * [ Python 79.9% ](https://github.com/huggingface/text-generation-inference/search?l=python)
  * [ Rust 15.3% ](https://github.com/huggingface/text-generation-inference/search?l=rust)
  * [ Cuda 2.8% ](https://github.com/huggingface/text-generation-inference/search?l=cuda)
  * [ C++ 0.8% ](https://github.com/huggingface/text-generation-inference/search?l=c%2B%2B)
  * [ Nix 0.3% ](https://github.com/huggingface/text-generation-inference/search?l=nix)
  * [ Shell 0.2% ](https://github.com/huggingface/text-generation-inference/search?l=shell)
  * Other 0.7%


## Footer
[ ](https://github.com "GitHub") © 2025 GitHub, Inc. 
### Footer navigation
  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 


You can’t perform that action at this time. 
