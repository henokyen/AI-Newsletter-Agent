[Skip to main content](https://openai.com/index/techniques-for-training-large-neural-networks/#main)
Log in
[](https://openai.com/)
Switch to
  * [ChatGPT(opens in a new window)](https://chatgpt.com/)
  * [Sora(opens in a new window)](https://sora.com/)
  * [API Platform(opens in a new window)](https://platform.openai.com/)


  * [Research](https://openai.com/research/index/)
  * [Safety](https://openai.com/safety/)
  * [ChatGPT](https://openai.com/chatgpt/overview/)
  * [Sora](https://openai.com/sora/)
  * [API Platform](https://openai.com/api/)
  * [For Business](https://openai.com/business/)
  * [Stories](https://openai.com/stories/)
  * [Company](https://openai.com/about/)
  * [News](https://openai.com/news/)


  * Research
Back to main menu
    * [Research Index](https://openai.com/research/index/)
    * [Research Overview](https://openai.com/research/)
    * [Research Residency](https://openai.com/residency/)
    * Latest Advancements
    * [GPT-4.5](https://openai.com/index/introducing-gpt-4-5/)
    * [OpenAI o3-mini](https://openai.com/index/openai-o3-mini/)
    * [OpenAI o1](https://openai.com/o1/)
    * [OpenAI o1-mini](https://openai.com/index/openai-o1-mini-advancing-cost-efficient-reasoning/)
    * [GPT-4o](https://openai.com/index/gpt-4o-system-card/)
    * [GPT-4o mini](https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/)
    * [Sora](https://openai.com/index/sora-system-card/)
  * Safety
Back to main menu
    * [Safety Approach](https://openai.com/safety/)
    * [Security & Privacy](https://openai.com/security-and-privacy/)
  * ChatGPT
Back to main menu
    * [Explore ChatGPT](https://openai.com/chatgpt/overview/)
    * [Team](https://openai.com/chatgpt/team/)
    * [Enterprise](https://openai.com/chatgpt/enterprise/)
    * [Education](https://openai.com/chatgpt/education/)
    * [Pricing](https://openai.com/chatgpt/pricing/)
    * [Download](https://openai.com/chatgpt/download/)
  * Sora
Back to main menu
    * [Sora Overview](https://openai.com/sora/)
    * [Features](https://openai.com/sora/#features)
    * [Pricing](https://openai.com/sora/#pricing)
    * [Help center(opens in a new window)](https://help.openai.com/en/articles/9957612-generating-videos-on-sora)
    * [Sora log in(opens in a new window)](https://sora.com/)
  * API Platform
Back to main menu
    * [Platform Overview](https://openai.com/api/)
    * [API Log in(opens in a new window)](https://platform.openai.com/login)
    * [Documentation(opens in a new window)](https://platform.openai.com/docs/overview)
    * [Developer Forum(opens in a new window)](https://community.openai.com/)
  * [For Business](https://openai.com/business/)
Back to main menu
    * [For Business](https://openai.com/business/)
    * [ChatGPT Team](https://openai.com/chatgpt/team/)
    * [ChatGPT Enterprise](https://openai.com/chatgpt/enterprise/)
    * [API Pricing](https://openai.com/api/pricing/)
    * [Contact Sales](https://openai.com/contact-sales/)
  * [Stories](https://openai.com/stories/)
  * Company
Back to main menu
    * [About us](https://openai.com/about/)
    * [Our Charter](https://openai.com/charter/)
    * [Careers](https://openai.com/careers/)
    * Brand
    * [Overview](https://openai.com/brand/)
    * [Logos](https://openai.com/brand/#logos)
    * [Gallery](https://openai.com/brand/#gallery)
    * [Partnerships](https://openai.com/brand/#partnerships)
    * [Typography](https://openai.com/brand/#typography)
    * [Language](https://openai.com/brand/#language)
    * [Contact](https://openai.com/brand/#contact)
  * [News](https://openai.com/news/)


Log in
OpenAI
Table of contents
  * [No parallelism](https://openai.com/index/techniques-for-training-large-neural-networks/#no-parallelism)
  * [Data parallelism](https://openai.com/index/techniques-for-training-large-neural-networks/#data-parallelism)
  * [Pipeline parallelism](https://openai.com/index/techniques-for-training-large-neural-networks/#pipeline-parallelism)
  * [Tensor parallelism](https://openai.com/index/techniques-for-training-large-neural-networks/#tensor-parallelism)
  * [Mixture-of-Experts (MoE)](https://openai.com/index/techniques-for-training-large-neural-networks/#mixture-of-experts-moe)
  * [Other memory saving designs](https://openai.com/index/techniques-for-training-large-neural-networks/#other-memory-saving-designs)


June 9, 2022
[Publication](https://openai.com/research/index/publication/)
# Techniques for training large neural networks
![Techniques For Training Large Neural Networks](https://images.ctfassets.net/kftzwdyauwt9/62793de4-0f01-42fc-539325d9af36/bc1ac82499fc1dc43f59accdd31d0195/image-9.webp?w=3840&q=90&fm=webp)
Loading…
Share
Large neural networks are at the core of many recent advances in AI, but training them is a difficult engineering and research challenge which requires orchestrating a cluster of GPUs to perform a single synchronized calculation.
Large neural networks are at the core of many recent advances in AI, but training them is a difficult engineering and research challenge which requires orchestrating a cluster of GPUs to perform a single synchronized calculation. As cluster and model sizes have grown, machine learning practitioners have developed an increasing variety of techniques to parallelize model training over many GPUs. At first glance, understanding these parallelism techniques may seem daunting, but with only a few assumptions about the structure of the computation these techniques become much more clear—at that point, you’re just shuttling around opaque bits from A to B like a network switch shuttles around packets.
## No parallelism
Loading...
Training a neural network is an iterative process. In every iteration, we do a pass forward through a model’s [layers⁠(opens in a new window)](https://developer.nvidia.com/blog/deep-learning-nutshell-core-concepts/#layer) to compute an output for each training example in a batch of data. Then another pass proceeds [backward⁠(opens in a new window)](https://youtu.be/Ilg3gGewQ5U) through the layers, propagating how much each parameter affects the final output by computing a [gradient⁠(opens in a new window)](https://youtu.be/IHZwWFHWa-w) with respect to each parameter. The average gradient for the batch, the parameters, and some per-parameter optimization state is passed to an optimization algorithm, such as [Adam⁠(opens in a new window)](https://arxiv.org/abs/1412.6980), which computes the next iteration’s parameters (which should have slightly better performance on your data) and new per-parameter optimization state. As the training iterates over batches of data, the model evolves to produce increasingly accurate outputs.
Various parallelism techniques slice this training process across different dimensions, including:
  * Data parallelism—run different subsets of the batch on different GPUs;
  * Pipeline parallelism—run different layers of the model on different GPUs;
  * Tensor parallelism—break up the math for a single operation such as a matrix multiplication to be split across GPUs;
  * Mixture-of-Experts—process each example by only a fraction of each layer.


(In this post, we’ll assume that you are using GPUs to train your neural networks, but the same ideas apply to those using any other [neural network accelerator⁠(opens in a new window)](https://www.synopsys.com/ai/what-is-an-ai-accelerator.html).)
## Data parallelism
 _Data Parallel_ training means copying the same parameters to multiple GPUs (often called “workers”) and assigning different examples to each to be processed simultaneously. Data parallelism alone still requires that your model fits into a single GPU’s memory, but lets you utilize the compute of many GPUs at the cost of storing many duplicate copies of your parameters. That being said, there are strategies to increase the effective RAM available to your GPU, such as temporarily offloading parameters to CPU memory between usages.
As each data parallel worker updates its copy of the parameters, they need to coordinate to ensure that each worker continues to have similar parameters. The simplest approach is to introduce blocking communication between workers: (1) independently compute the gradient on each worker; (2) [average the gradients across workers⁠(opens in a new window)](https://tech.preferred.jp/en/blog/technologies-behind-distributed-deep-learning-allreduce/); and (3) independently compute the same new parameters on each worker. Step (2) is a blocking average which requires transferring quite a lot of data (proportional to the number of workers times the size of your parameters), which can hurt your training throughput. There are various [asynchronous synchronization schemes⁠(opens in a new window)](https://arxiv.org/abs/1106.5730) to remove this overhead, but they hurt learning efficiency; in practice, people generally stick with the synchronous approach.
## Pipeline parallelism
With  _Pipeline Parallel_ training, we partition sequential chunks of the model across GPUs. Each GPU holds only a fraction of parameters, and thus the same model consumes proportionally less memory per GPU.
It’s straightforward to split a large model into chunks of consecutive layers. However, there’s a sequential dependency between inputs and outputs of layers, so a naive implementation can lead to a large amount of idle time while a worker waits for outputs from the previous machine to be used as its inputs. These waiting time chunks are known as “bubbles,” wasting the computation that could be done by the idling machines.
Loading...
We can reuse the ideas from data parallelism to reduce the cost of the bubble by having each worker only process a subset of data elements at one time, allowing us to cleverly overlap new computation with wait time. The core idea is to split one batch into multiple microbatches; each microbatch should be proportionally faster to process and each worker begins working on the next microbatch as soon as it’s available, thus expediting the pipeline execution. With enough microbatches the workers can be utilized most of the time with a minimal bubble at the beginning and end of the step. Gradients are averaged across microbatches, and updates to the parameters happen only once all microbatches have been completed.
The number of workers that the model is split over is commonly known as  _pipeline depth_.
During the forward pass, workers only need to send the output (called activations) of its chunk of layers to the next worker; during the backward pass, it only sends the gradients on those activations to the previous worker. There’s a big design space of how to schedule these passes and how to aggregate the gradients across microbatches. [GPipe⁠(opens in a new window)](https://arxiv.org/abs/1811.06965) has each worker process forward and backward passes consecutively and then aggregates gradients from multiple microbatches synchronously at the end. [PipeDream⁠(opens in a new window)](https://cs.stanford.edu/~matei/papers/2019/sosp_pipedream.pdf) instead schedules each worker to alternatively process forward and backward passes.
Loading...
## Tensor parallelism
Pipeline parallelism splits a model “vertically” by layer. It’s also possible to “horizontally” split certain operations within a layer, which is usually called  _Tensor Parallel_ training. For many modern models (such as the [Transformer⁠(opens in a new window)](https://jalammar.github.io/illustrated-transformer/)), the computation bottleneck is multiplying an activation batch matrix with a large weight matrix. [Matrix multiplication⁠(opens in a new window)](https://en.wikipedia.org/wiki/Matrix_multiplication) can be thought of as dot products between pairs of rows and columns; it’s possible to compute independent dot products on different GPUs, or to compute parts of each dot product on different GPUs and sum up the results. With either strategy, we can slice the weight matrix into even-sized “shards”, host each shard on a different GPU, and use that shard to compute the relevant part of the overall matrix product before later communicating to combine the results.
One example is [Megatron-LM⁠(opens in a new window)](https://nv-adlr.github.io/MegatronLM), which parallelizes matrix multiplications within the Transformer’s self-attention and MLP layers. [PTD-P⁠(opens in a new window)](https://arxiv.org/abs/2104.04473) uses tensor, data, and pipeline parallelism; its pipeline schedule assigns multiple non-consecutive layers to each device, reducing bubble overhead at the cost of more network communication.
Sometimes the input to the network can be parallelized across a dimension with a high degree of parallel computation relative to cross-communication. [Sequence parallelism⁠(opens in a new window)](https://arxiv.org/abs/2205.05198) is one such idea, where an input sequence is split across time into multiple sub-examples, proportionally decreasing peak memory consumption by allowing the computation to proceed with more granularly-sized examples.
## Mixture-of-Experts (MoE)
With the [Mixture-of-Experts (MoE)⁠(opens in a new window)](https://arxiv.org/abs/1701.06538) approach, only a fraction of the network is used to compute the output for any one input. One example approach is to have many sets of weights and the network can choose which set to use via a gating mechanism at inference time. This enables many more parameters without increased computation cost. Each set of weights is referred to as “experts,” in the hope that the network will learn to assign specialized computation and skills to each expert. Different experts can be hosted on different GPUs, providing a clear way to scale up the number of GPUs used for a model.
![Illustration of a mixture-of-experts \(MoE\) layer. Only 2 out of the n experts are selected by the gating network. \(Image adapted from: Shazeer et al., 2017\)](https://images.ctfassets.net/kftzwdyauwt9/cb1a6327-67de-4d07-408086e8e33b/e24e8be0f14f8285430ef975c2279c97/moe.svg?w=3840&q=90)
Illustration of a mixture-of-experts (MoE) layer. Only 2 out of the  _n_ experts are selected by the gating network. (Image adapted from: [Shazeer et al., 2017⁠(opens in a new window)](https://arxiv.org/abs/1701.06538))
[GShard⁠(opens in a new window)](https://arxiv.org/abs/2006.16668) scales an MoE Transformer up to 600 billion parameters with a scheme where only the MoE layers are split across multiple TPU devices and other layers are fully duplicated. [Switch Transformer⁠(opens in a new window)](https://arxiv.org/abs/2101.03961) scales model size to trillions of parameters with even higher sparsity by routing one input to a single expert.
## Other memory saving designs
There are many other computational strategies to make training increasingly large neural networks more tractable. For example:
  * To compute the gradient, you need to have saved the original activations, which can consume a lot of device RAM. [ _Checkpointing_ ⁠(opens in a new window)](https://arxiv.org/abs/1604.06174) (also known as activation recomputation) stores any subset of activations, and recomputes the intermediate ones just-in-time during the backward pass. This saves a lot of memory at the computational cost of at most one additional full forward pass. One can also continually trade off between compute and memory cost by [selective activation recomputation⁠(opens in a new window)](https://arxiv.org/abs/2205.05198), which is checkpointing subsets of the activations that are relatively more expensive to store but cheaper to compute.
  * [_Mixed Precision Training_ ⁠(opens in a new window)](https://arxiv.org/abs/1710.03740) is to train models using lower-precision numbers (most commonly [FP16⁠(opens in a new window)](https://en.wikipedia.org/wiki/Half-precision_floating-point_format)). Modern accelerators can reach much higher FLOP counts with lower-precision numbers, and you also save on device RAM. With proper care, the resulting model can lose almost no accuracy.
  * _Offloading_ is to temporarily offload unused data to the CPU or amongst different devices and later read it back when needed. Naive implementations will slow down training a lot, but sophisticated implementations will pre-fetch data so that the device never needs to wait on it. One implementation of this idea is [ZeRO⁠(opens in a new window)](https://arxiv.org/abs/1910.02054) which splits the parameters, gradients, and optimizer states across all available hardware and materializes them as needed.
  * _Memory Efficient Optimizers_ have been proposed to reduce the memory footprint of the running state maintained by the optimizer, such as [Adafactor⁠(opens in a new window)](https://arxiv.org/abs/1804.04235).
  * _Compression_ also can be used for storing intermediate results in the network. For example, [Gist⁠(opens in a new window)](https://www.microsoft.com/en-us/research/uploads/prod/2018/04/fiddle-gist-isca18.pdf) compresses activations that are saved for the backward pass; [DALL·E⁠](https://openai.com/index/dall-e/) compresses the gradients before synchronizing them.


At OpenAI, we are training and improving large models from the underlying infrastructure all the way to deploying them for real-world problems. If you’d like to put the ideas from this post into practice—especially relevant for our Scaling and Applied Research teams—we’re [hiring⁠](https://openai.com/careers/research-engineer/)!
  * [Compute Scaling](https://openai.com/research/index/?tags=compute-scaling)
  * [Software & Engineering](https://openai.com/research/index/?tags=software-engineering)
  * [Learning Paradigms](https://openai.com/research/index/?tags=learning-paradigms)


## Authors
[Lilian Weng](https://openai.com/news/?author=lilian-weng#results), [Greg Brockman](https://openai.com/news/?author=greg-brockman#results)
## Acknowledgments
Thanks to Nikolas Tezak, Sam Altman, Daniel Gackle, Ilya Sutskever, and Steven Adler for feedback on drafts. Thanks to Justin Jay Wang, Bianca Martin, and Steve Dowling for communications and design.
## Related articles
[View all](https://openai.com/news/publication/)
![Introducing Triton Open Source Gpu Programming For Neural Networks](https://images.ctfassets.net/kftzwdyauwt9/cdce1ebd-19a2-4848-a08ec8c44e18/55b924fc6628318148b7c5c4902551e7/image-18.webp?w=3840&q=90&fm=webp)
[Introducing Triton: Open-source GPU programming for neural networksReleaseJul 28, 2021](https://openai.com/index/triton/)
![Scaling Kubernetes To 7 500 Nodes](https://images.ctfassets.net/kftzwdyauwt9/84745f0a-d786-4066-99f031ec2cb2/be1d8d7357f9f5bc35970e058f42c8d0/image-25.webp?w=3840&q=90&fm=webp)
[Scaling Kubernetes to 7,500 nodesConclusionJan 25, 2021](https://openai.com/index/scaling-kubernetes-to-7500-nodes/)
![AI And Efficiency](https://images.ctfassets.net/kftzwdyauwt9/e5cba1f8-883b-4961-dca6f726f936/be1a627ab2f509a68b91b8a7ef29f610/image_128.png?w=3840&q=90&fm=webp)
[AI and efficiencyPublicationMay 5, 2020](https://openai.com/index/ai-and-efficiency/)
Our Research
  * [Research Index](https://openai.com/research/index/)
  * [Research Overview](https://openai.com/research/)
  * [Research Residency](https://openai.com/residency/)


Latest Advancements
  * [OpenAI o1](https://openai.com/index/learning-to-reason-with-llms/)
  * [OpenAI o1-mini](https://openai.com/index/openai-o1-mini-advancing-cost-efficient-reasoning/)
  * [GPT-4o](https://openai.com/index/gpt-4o-system-card/)
  * [GPT-4o mini](https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/)
  * [Sora](https://openai.com/index/sora-system-card/)


Safety
  * [Safety Approach](https://openai.com/safety/)
  * [Security & Privacy](https://openai.com/security-and-privacy/)


ChatGPT
  * [Explore ChatGPT](https://openai.com/chatgpt/overview/)
  * [Team](https://openai.com/chatgpt/team/)
  * [Enterprise](https://openai.com/chatgpt/enterprise/)
  * [Education](https://openai.com/chatgpt/education/)
  * [Pricing](https://openai.com/chatgpt/pricing/)
  * [Download](https://openai.com/chatgpt/download/)


Sora
  * [Sora Overview](https://openai.com/sora/)
  * [Features](https://openai.com/sora/#features)
  * [Pricing](https://openai.com/sora/#pricing)
  * [Sora log in(opens in a new window)](https://sora.com/)


API Platform
  * [Platform Overview](https://openai.com/api/)
  * [Pricing](https://openai.com/api/pricing/)
  * [API log in(opens in a new window)](https://platform.openai.com/login)
  * [Documentation(opens in a new window)](https://platform.openai.com/docs/overview)
  * [Developer Forum(opens in a new window)](https://community.openai.com/)


For Business
  * [Overview](https://openai.com/business/)


Company
  * [About us](https://openai.com/about/)
  * [Our Charter](https://openai.com/charter/)
  * [Careers](https://openai.com/careers/)
  * [Brand](https://openai.com/brand/)


More
  * [News](https://openai.com/news/)
  * [Stories](https://openai.com/stories/)
  * [Help Center(opens in a new window)](https://help.openai.com/)


Terms & Policies
  * [Terms of Use](https://openai.com/policies/terms-of-use/)
  * [Privacy Policy](https://openai.com/policies/privacy-policy/)
  * [Security](https://openai.com/security-and-privacy/)
  * [Other Policies ](https://openai.com/policies/)


[(opens in a new window)](https://x.com/OpenAI)[(opens in a new window)](https://www.youtube.com/OpenAI)[(opens in a new window)](https://www.linkedin.com/company/openai)[(opens in a new window)](https://github.com/openai)[(opens in a new window)](https://www.instagram.com/openai/?hl=en)[(opens in a new window)](https://www.tiktok.com/@openai?lang=en)[(opens in a new window)](https://discord.gg/openai)
OpenAI © 2015–2025
