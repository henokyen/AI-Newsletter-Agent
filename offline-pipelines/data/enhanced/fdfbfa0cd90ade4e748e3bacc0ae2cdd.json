{
    "id": "fdfbfa0cd90ade4e748e3bacc0ae2cdd",
    "metadata": {
        "id": "fdfbfa0cd90ade4e748e3bacc0ae2cdd",
        "url": "https://github.com/GokuMohandas/testing-ml/",
        "title": "GitHub - GokuMohandas/testing-ml: Learn how to create reliable ML systems by testing code, data and models.",
        "properties": {
            "description": "Learn how to create reliable ML systems by testing code, data and models. - GokuMohandas/testing-ml",
            "keywords": null,
            "author": null,
            "og:image": "https://repository-images.githubusercontent.com/520281400/8d5b6a04-02f8-4912-93a7-703cbc47a697",
            "og:image:alt": "Learn how to create reliable ML systems by testing code, data and models. - GokuMohandas/testing-ml",
            "og:site_name": "GitHub",
            "og:type": "object",
            "og:title": "GitHub - GokuMohandas/testing-ml: Learn how to create reliable ML systems by testing code, data and models.",
            "og:url": "https://github.com/GokuMohandas/testing-ml",
            "og:description": "Learn how to create reliable ML systems by testing code, data and models. - GokuMohandas/testing-ml",
            "twitter:image": "https://repository-images.githubusercontent.com/520281400/8d5b6a04-02f8-4912-93a7-703cbc47a697",
            "twitter:site": "@github",
            "twitter:card": "summary_large_image",
            "twitter:title": "GitHub - GokuMohandas/testing-ml: Learn how to create reliable ML systems by testing code, data and models.",
            "twitter:description": "Learn how to create reliable ML systems by testing code, data and models. - GokuMohandas/testing-ml"
        }
    },
    "parent_metadata": {
        "id": "e49ceebeb3cc45bb4a48d6d7b8b22476",
        "url": "https://www.notion.so/Testing-e49ceebeb3cc45bb4a48d6d7b8b22476",
        "title": "Testing",
        "properties": {
            "Type": "Leaf"
        }
    },
    "content": "[Skip to content](https://github.com/GokuMohandas/testing-ml/#start-of-content)\n## Navigation Menu\nToggle navigation\n[ ](https://github.com/)\n[ Sign in ](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml%2F)\n  * Product \n    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)\n    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)\n    * [ Actions Automate any workflow  ](https://github.com/features/actions)\n    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)\n    * [ Issues Plan and track work  ](https://github.com/features/issues)\n    * [ Code Review Manage code changes  ](https://github.com/features/code-review)\n    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)\n    * [ Code Search Find more, search less  ](https://github.com/features/code-search)\nExplore\n    * [ All features ](https://github.com/features)\n    * [ Documentation ](https://docs.github.com)\n    * [ GitHub Skills ](https://skills.github.com)\n    * [ Blog ](https://github.blog)\n  * Solutions \nBy company size\n    * [ Enterprises ](https://github.com/enterprise)\n    * [ Small and medium teams ](https://github.com/team)\n    * [ Startups ](https://github.com/enterprise/startups)\n    * [ Nonprofits ](https://github.com/solutions/industry/nonprofits)\nBy use case\n    * [ DevSecOps ](https://github.com/solutions/use-case/devsecops)\n    * [ DevOps ](https://github.com/solutions/use-case/devops)\n    * [ CI/CD ](https://github.com/solutions/use-case/ci-cd)\n    * [ View all use cases ](https://github.com/solutions/use-case)\nBy industry\n    * [ Healthcare ](https://github.com/solutions/industry/healthcare)\n    * [ Financial services ](https://github.com/solutions/industry/financial-services)\n    * [ Manufacturing ](https://github.com/solutions/industry/manufacturing)\n    * [ Government ](https://github.com/solutions/industry/government)\n    * [ View all industries ](https://github.com/solutions/industry)\n[ View all solutions ](https://github.com/solutions)\n  * Resources \nTopics\n    * [ AI ](https://github.com/resources/articles/ai)\n    * [ DevOps ](https://github.com/resources/articles/devops)\n    * [ Security ](https://github.com/resources/articles/security)\n    * [ Software Development ](https://github.com/resources/articles/software-development)\n    * [ View all ](https://github.com/resources/articles)\nExplore\n    * [ Learning Pathways ](https://resources.github.com/learn/pathways)\n    * [ Events & Webinars ](https://resources.github.com)\n    * [ Ebooks & Whitepapers ](https://github.com/resources/whitepapers)\n    * [ Customer Stories ](https://github.com/customer-stories)\n    * [ Partners ](https://partner.github.com)\n    * [ Executive Insights ](https://github.com/solutions/executive-insights)\n  * Open Source \n    * [ GitHub Sponsors Fund open source developers  ](https://github.com/sponsors)\n    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)\nRepositories\n    * [ Topics ](https://github.com/topics)\n    * [ Trending ](https://github.com/trending)\n    * [ Collections ](https://github.com/collections)\n  * Enterprise \n    * [ Enterprise platform AI-powered developer platform  ](https://github.com/enterprise)\nAvailable add-ons\n    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)\n    * [ Copilot for business Enterprise-grade AI features  ](https://github.com/features/copilot/copilot-business)\n    * [ Premium Support Enterprise-grade 24/7 support  ](https://github.com/premium-support)\n  * [Pricing](https://github.com/pricing)\n\n\nSearch or jump to...\n# Search code, repositories, users, issues, pull requests...\nSearch \nClear\n[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)\n#  Provide feedback \nWe read every piece of feedback, and take your input very seriously.\nInclude my email address so I can be contacted\nCancel  Submit feedback \n#  Saved searches \n## Use saved searches to filter your results more quickly\nName\nQuery\nTo see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). \nCancel  Create saved search \n[ Sign in ](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml%2F)\n[ Sign up ](https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=GokuMohandas%2Ftesting-ml) Reseting focus\nYou signed in with another tab or window. [Reload](https://github.com/GokuMohandas/testing-ml/) to refresh your session. You signed out in another tab or window. [Reload](https://github.com/GokuMohandas/testing-ml/) to refresh your session. You switched accounts on another tab or window. [Reload](https://github.com/GokuMohandas/testing-ml/) to refresh your session. Dismiss alert\n{{ message }}\n[ GokuMohandas ](https://github.com/GokuMohandas) / **[testing-ml](https://github.com/GokuMohandas/testing-ml) ** Public\n  * [ Notifications ](https://github.com/login?return_to=%2FGokuMohandas%2Ftesting-ml) You must be signed in to change notification settings\n  * [ Fork 13 ](https://github.com/login?return_to=%2FGokuMohandas%2Ftesting-ml)\n  * [ Star  86 ](https://github.com/login?return_to=%2FGokuMohandas%2Ftesting-ml)\n\n\nLearn how to create reliable ML systems by testing code, data and models. \n[ 86 stars ](https://github.com/GokuMohandas/testing-ml/stargazers) [ 13 forks ](https://github.com/GokuMohandas/testing-ml/forks) [ Branches ](https://github.com/GokuMohandas/testing-ml/branches) [ Tags ](https://github.com/GokuMohandas/testing-ml/tags) [ Activity ](https://github.com/GokuMohandas/testing-ml/activity)\n[ Star  ](https://github.com/login?return_to=%2FGokuMohandas%2Ftesting-ml)\n[ Notifications ](https://github.com/login?return_to=%2FGokuMohandas%2Ftesting-ml) You must be signed in to change notification settings\n  * [ Code ](https://github.com/GokuMohandas/testing-ml)\n  * [ Issues 0 ](https://github.com/GokuMohandas/testing-ml/issues)\n  * [ Pull requests 0 ](https://github.com/GokuMohandas/testing-ml/pulls)\n  * [ Actions ](https://github.com/GokuMohandas/testing-ml/actions)\n  * [ Projects 0 ](https://github.com/GokuMohandas/testing-ml/projects)\n  * [ Security ](https://github.com/GokuMohandas/testing-ml/security)\n  * [ Insights ](https://github.com/GokuMohandas/testing-ml/pulse)\n\n\nAdditional navigation options\n  * [ Code  ](https://github.com/GokuMohandas/testing-ml)\n  * [ Issues  ](https://github.com/GokuMohandas/testing-ml/issues)\n  * [ Pull requests  ](https://github.com/GokuMohandas/testing-ml/pulls)\n  * [ Actions  ](https://github.com/GokuMohandas/testing-ml/actions)\n  * [ Projects  ](https://github.com/GokuMohandas/testing-ml/projects)\n  * [ Security  ](https://github.com/GokuMohandas/testing-ml/security)\n  * [ Insights  ](https://github.com/GokuMohandas/testing-ml/pulse)\n\n\n# GokuMohandas/testing-ml\nmain\n[Branches](https://github.com/GokuMohandas/testing-ml/branches)[Tags](https://github.com/GokuMohandas/testing-ml/tags)\n[](https://github.com/GokuMohandas/testing-ml/branches)[](https://github.com/GokuMohandas/testing-ml/tags)\nGo to file\nCode\n## Folders and files\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n## Latest commit\n## History\n[5 Commits](https://github.com/GokuMohandas/testing-ml/commits/main/)[](https://github.com/GokuMohandas/testing-ml/commits/main/)  \n[.gitignore](https://github.com/GokuMohandas/testing-ml/blob/main/.gitignore \".gitignore\")| [.gitignore](https://github.com/GokuMohandas/testing-ml/blob/main/.gitignore \".gitignore\")  \n[README.md](https://github.com/GokuMohandas/testing-ml/blob/main/README.md \"README.md\")| [README.md](https://github.com/GokuMohandas/testing-ml/blob/main/README.md \"README.md\")  \n[testing.ipynb](https://github.com/GokuMohandas/testing-ml/blob/main/testing.ipynb \"testing.ipynb\")| [testing.ipynb](https://github.com/GokuMohandas/testing-ml/blob/main/testing.ipynb \"testing.ipynb\")  \nView all files  \n## Repository files navigation\n  * [README](https://github.com/GokuMohandas/testing-ml/)\n\n\n# Testing ML\n[](https://github.com/GokuMohandas/testing-ml/#testing-ml)\nLearn how to create reliable ML systems by testing code, data and models.\n[![](https://camo.githubusercontent.com/1c8877d013d3bce832b494b16e92a58bb0b56d0756071d8d20da475c5ea4d95b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5375627363726962652d34304b2d627269676874677265656e)](https://madewithml.com) [![](https://camo.githubusercontent.com/a9dccbaf0395471a9de4f70c2f883806ec1b335a30ea3c43aa0c62e514e01497/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f476f6b754d6f68616e6461732f4d6164652d576974682d4d4c2e7376673f7374796c653d736f6369616c266c6162656c3d53746172)](https://github.com/GokuMohandas/Made-With-ML) [![](https://camo.githubusercontent.com/fc554d6bdc946c70ad1a2b66fd77c3dad48cb4d7e5d6049ef463738c0aaaf4da/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d2d3565626130302e7376673f6c6162656c3d4c696e6b6564496e266c6f676f3d6c696e6b6564696e267374796c653d736f6369616c)](https://www.linkedin.com/in/goku) [![](https://camo.githubusercontent.com/1928f043a6430a553dd6b3d8ecf4faea06dbeea5c40660d6de57a9c56edb909a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f476f6b754d6f68616e6461732e7376673f6c6162656c3d466f6c6c6f77267374796c653d736f6369616c)](https://twitter.com/GokuMohandas)\n👉 This repository contains the [interactive notebook](https://colab.research.google.com/github/GokuMohandas/testing-ml/blob/main/testing.ipynb) that complements the [testing lesson](https://madewithml.com/courses/mlops/testing/), which is a part of the [MLOps course](https://github.com/GokuMohandas/mlops-course). If you haven't already, be sure to check out the [lesson](https://madewithml.com/courses/mlops/testing/) because all the concepts are covered extensively and tied to software engineering best practices for building ML systems.\n[![](https://camo.githubusercontent.com/2d36366473e492bfb3cfd8515db7631777116c574d861d83eaee03d2781f3d3a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652ff09f939620526561642d6c6573736f6e2d396366)](https://madewithml.com/courses/mlops/testing/) [![](https://camo.githubusercontent.com/d09e210cec6e79b6b8b18e3ff272570ef547472abfbedfa88e1bfd7fd1b948dc/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d566965772532304f6e25323047697448756226636f6c6f723d353836303639266c6f676f3d676974687562266c6162656c436f6c6f723d326633363364)](https://github.com/GokuMohandas/testing-ml/blob/main/testing.ipynb) [![Open In Colab](https://camo.githubusercontent.com/96889048f8a9014fdeba2a891f97150c6aac6e723f5190236b10215a97ed41f3/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667)](https://colab.research.google.com/github/GokuMohandas/testing-ml/blob/main/testing.ipynb)\n  * [Data](https://github.com/GokuMohandas/testing-ml/#data)\n    * [Expectations](https://github.com/GokuMohandas/testing-ml/#expectations)\n    * [Production](https://github.com/GokuMohandas/testing-ml/#production)\n  * [Models](https://github.com/GokuMohandas/testing-ml/#models)\n    * [Training](https://github.com/GokuMohandas/testing-ml/#training)\n    * [Behavioral](https://github.com/GokuMohandas/testing-ml/#behavioral)\n    * [Adversarial](https://github.com/GokuMohandas/testing-ml/#adversarial)\n    * [Inference](https://github.com/GokuMohandas/testing-ml/#inference)\n\n\n## Data\n[](https://github.com/GokuMohandas/testing-ml/#data)\nTools such as [pytest](https://madewithml.com/courses/mlops/testing/#pytest) allow us to test the functions that interact with our data but not the validity of the data itself. We're going to use the [great expectations](https://github.com/great-expectations/great_expectations) library to create expectations as to what our data should look like in a standardized way.\n```\n!pip install great-expectations==0.15.15 -q\n```\n\n```\nimport great_expectations as ge\nimport json\nimport pandas as pd\nfrom urllib.request import urlopen\n```\n\n```\n# Load labeled projects\nprojects = pd.read_csv(\"https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/projects.csv\")\ntags = pd.read_csv(\"https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/tags.csv\")\ndf = ge.dataset.PandasDataset(pd.merge(projects, tags, on=\"id\"))\nprint (f\"{len(df)} projects\")\ndf.head(5)\n```\n\nid | created_on | title | description | tag  \n---|---|---|---|---  \n0 | 6 | 2020-02-20 06:43:18 | Comparison between YOLO and RCNN on real world... | Bringing theory to experiment is cool. We can ... | computer-vision  \n1 | 7 | 2020-02-20 06:47:21 | Show, Infer & Tell: Contextual Inference for C... | The beauty of the work lies in the way it arch... | computer-vision  \n2 | 9 | 2020-02-24 16:24:45 | Awesome Graph Classification | A collection of important graph embedding, cla... | graph-learning  \n3 | 15 | 2020-02-28 23:55:26 | Awesome Monte Carlo Tree Search | A curated list of Monte Carlo tree search papers... | reinforcement-learning  \n4 | 19 | 2020-03-03 13:54:31 | Diffusion to Vector | Reference implementation of Diffusion2Vec (Com... | graph-learning  \n### Expectations\n[](https://github.com/GokuMohandas/testing-ml/#expectations)\nWhen it comes to creating expectations as to what our data should look like, we want to think about our entire dataset and all the features (columns) within it.\n```\n# Presence of specific features\ndf.expect_table_columns_to_match_ordered_list(\n  column_list=[\"id\", \"created_on\", \"title\", \"description\", \"tag\"]\n)\n```\n\n```\n# Unique combinations of features (detect data leaks!)\ndf.expect_compound_columns_to_be_unique(column_list=[\"title\", \"description\"])\n```\n\n```\n# Missing values\ndf.expect_column_values_to_not_be_null(column=\"tag\")\n```\n\n```\n# Unique values\ndf.expect_column_values_to_be_unique(column=\"id\")\n```\n\n```\n# Type adherence\ndf.expect_column_values_to_be_of_type(column=\"title\", type_=\"str\")\n```\n\n```\n# List (categorical) / range (continuous) of allowed values\ntags = [\"computer-vision\", \"graph-learning\", \"reinforcement-learning\",\n    \"natural-language-processing\", \"mlops\", \"time-series\"]\ndf.expect_column_values_to_be_in_set(column=\"tag\", value_set=tags)\n```\n\nThere are just a few of the different expectations that we can create. Be sure to explore all the [expectations](https://greatexpectations.io/expectations/), including [custom expectations](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/overview/). Here are some other popular expectations that don't pertain to our specific dataset but are widely applicable:\n  * feature value relationships with other feature values → `expect_column_pair_values_a_to_be_greater_than_b`\n  * row count (exact or range) of samples → `expect_table_row_count_to_be_between`\n  * value statistics (mean, std, median, max, min, sum, etc.) → `expect_column_mean_to_be_between`\n\n\n### Production\n[](https://github.com/GokuMohandas/testing-ml/#production)\nThe advantage of using a library such as great expectations, as opposed to isolated assert statements is that we can:\n  * reduce redundant efforts for creating tests across data modalities\n  * automatically create testing [checkpoints](https://madewithml.com/courses/mlops/testing#checkpoints) to execute as our dataset grows\n  * automatically generate [documentation](https://madewithml.com/courses/mlops/testing#documentation) on expectations and report on runs\n  * easily connect with backend data sources such as local file systems, S3, databases, etc.\n\n\n```\n# Run all tests on our DataFrame at once\nexpectation_suite = df.get_expectation_suite(discard_failed_expectations=False)\ndf.validate(expectation_suite=expectation_suite, only_return_failures=True)\n```\n\n```\n\"success\": true,\n\"evaluation_parameters\": {},\n\"results\": [],\n\"statistics\": {\n  \"evaluated_expectations\": 6,\n  \"successful_expectations\": 6,\n  \"unsuccessful_expectations\": 0,\n  \"success_percent\": 100.0\n}\n```\n\nMany of these expectations will be executed when the data is extracted, loaded and transformed during our [DataOps workflows](https://madewithml.com/courses/mlops/orchestration#dataops). Typically, the data will be extracted from a source ([database](https://madewithml.com/courses/mlops/data-stack#database), [API](https://madewithml.com/courses/mlops/api), etc.) and loaded into a data system (ex. [data warehouse](https://madewithml.com/courses/mlops/data-stack#data-warehouse)) before being transformed there (ex. using [dbt](https://www.getdbt.com/)) for downstream applications. Throughout these tasks, Great Expectations checkpoint validations can be run to ensure the validity of the data and the changes applied to it.\n[![ETL pipelines in production](https://camo.githubusercontent.com/801210afab0c444fbabeb6f87b8686b9fd11907c3e3bc448a9e244be19b1ec4c/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f74657374696e672f70726f64756374696f6e2e706e67)](https://camo.githubusercontent.com/801210afab0c444fbabeb6f87b8686b9fd11907c3e3bc448a9e244be19b1ec4c/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f74657374696e672f70726f64756374696f6e2e706e67)\n## Models\n[](https://github.com/GokuMohandas/testing-ml/#models)\nOnce we've tested our data, we can use it for downstream applications such as training machine learning models. It's important that we also test these model artifacts to ensure reliable behavior in our application.\n### Training\n[](https://github.com/GokuMohandas/testing-ml/#training)\nUnlike traditional software, ML models can run to completion without throwing any exceptions / errors but can produce incorrect systems. We want to catch errors quickly to save on time and compute.\n  * Check shapes and values of model output\n\n\n```\nassert model(inputs).shape == torch.Size([len(inputs), num_classes])\n```\n\n  * Check for decreasing loss after one batch of training\n\n\n```\nassert epoch_loss < prev_epoch_loss\n```\n\n  * Overfit on a batch\n\n\n```\naccuracy = train(model, inputs=batches[0])\nassert accuracy == pytest.approx(0.95, abs=0.05) # 0.95 ± 0.05\n```\n\n  * Train to completion (tests early stopping, saving, etc.)\n\n\n```\ntrain(model)\nassert learning_rate >= min_learning_rate\nassert artifacts\n```\n\n  * On different devices\n\n\n```\nassert train(model, device=torch.device(\"cpu\"))\nassert train(model, device=torch.device(\"cuda\"))\n```\n\n### Behavioral\n[](https://github.com/GokuMohandas/testing-ml/#behavioral)\nBehavioral testing is the process of testing input data and expected outputs while treating the model as a black box (model agnostic evaluation). A landmark paper on this topic is [Beyond Accuracy: Behavioral Testing of NLP Models with CheckList](https://arxiv.org/abs/2005.04118) which breaks down behavioral testing into three types of tests:\n  * `invariance`: Changes should not affect outputs.\n\n\n```\n# INVariance via verb injection (changes should not affect outputs)\ntokens = [\"revolutionized\", \"disrupted\"]\ntexts = [f\"Transformers applied to NLP have {token} the ML field.\" for token in tokens]\npredict.predict(texts=texts, artifacts=artifacts)\n```\n\n```\n['natural-language-processing', 'natural-language-processing']\n\n```\n\n  * `directional`: Change should affect outputs.\n\n\n```\n# DIRectional expectations (changes with known outputs)\ntokens = [\"text classification\", \"image classification\"]\ntexts = [f\"ML applied to {token}.\" for token in tokens]\npredict.predict(texts=texts, artifacts=artifacts)\n```\n\n```\n['natural-language-processing', 'computer-vision']\n\n```\n\n  * `minimum functionality`: Simple combination of inputs and expected outputs.\n\n\n```\n# Minimum Functionality Tests (simple input/output pairs)\ntokens = [\"natural language processing\", \"mlops\"]\ntexts = [f\"{token} is the next big wave in machine learning.\" for token in tokens]\npredict.predict(texts=texts, artifacts=artifacts)\n```\n\n```\n['natural-language-processing', 'mlops']\n\n```\n\n### Adversarial\n[](https://github.com/GokuMohandas/testing-ml/#adversarial)\nBehavioral testing can be extended to adversarial testing where we test to see how the model would perform under edge cases, bias, noise, etc.\n```\ntexts = [\n  \"CNNs for text classification.\", # CNNs are typically seen in computer-vision projects\n  \"This should not produce any relevant topics.\" # should predict `other` label\n]\npredict.predict(texts=texts, artifacts=artifacts)\n```\n\n```\n  ['natural-language-processing', 'other']\n\n```\n\n### Inference\n[](https://github.com/GokuMohandas/testing-ml/#inference)\nWhen our model is deployed, most users will be using it for inference (directly / indirectly), so it's very important that we test all aspects of it.\n#### Loading artifacts\n[](https://github.com/GokuMohandas/testing-ml/#loading-artifacts)\nThis is the first time we're not loading our components from in-memory so we want to ensure that the required artifacts (model weights, encoders, config, etc.) are all able to be loaded.\n```\nartifacts = main.load_artifacts(run_id=run_id)\nassert isinstance(artifacts[\"label_encoder\"], data.LabelEncoder)\n...\n```\n\n#### Prediction\n[](https://github.com/GokuMohandas/testing-ml/#prediction)\nOnce we have our artifacts loaded, we're readying to test our prediction pipelines. We should test samples with just one input, as well as a batch of inputs (ex. padding can have unintended consequences sometimes).\n```\n# test our API call directly\ndata = {\n  \"texts\": [\n    {\"text\": \"Transfer learning with transformers for text classification.\"},\n    {\"text\": \"Generative adversarial networks in both PyTorch and TensorFlow.\"},\n  ]\n}\nresponse = client.post(\"/predict\", json=data)\nassert response.status_code == HTTPStatus.OK\nassert response.request.method == \"POST\"\nassert len(response.json()[\"data\"][\"predictions\"]) == len(data[\"texts\"])\n...\n```\n\n## Learn more\n[](https://github.com/GokuMohandas/testing-ml/#learn-more)\nWhile these are the foundational concepts for testing ML systems, there are a lot of software best practices for testing that we cannot show in an isolated repository. Learn a lot more about comprehensively testing code, data and models for ML systems in our [testing lesson](https://madewithml.com/courses/mlops/testing/).\n## About\nLearn how to create reliable ML systems by testing code, data and models. \n### Topics\n[ testing ](https://github.com/topics/testing \"Topic: testing\") [ machine-learning ](https://github.com/topics/machine-learning \"Topic: machine-learning\") [ pytest ](https://github.com/topics/pytest \"Topic: pytest\") [ mlops ](https://github.com/topics/mlops \"Topic: mlops\") [ great-expectations ](https://github.com/topics/great-expectations \"Topic: great-expectations\")\n### Resources\n[ Readme ](https://github.com/GokuMohandas/testing-ml/#readme-ov-file)\n[ Activity](https://github.com/GokuMohandas/testing-ml/activity)\n### Stars\n[ **86** stars](https://github.com/GokuMohandas/testing-ml/stargazers)\n### Watchers\n[ **2** watching](https://github.com/GokuMohandas/testing-ml/watchers)\n### Forks\n[ **13** forks](https://github.com/GokuMohandas/testing-ml/forks)\n[ Report repository ](https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml&report=GokuMohandas+%28user%29)\n##  [Releases](https://github.com/GokuMohandas/testing-ml/releases)\nNo releases published\n##  [Packages 0](https://github.com/users/GokuMohandas/packages?repo_name=testing-ml)\nNo packages published \n## Languages\n  * [ Jupyter Notebook 100.0% ](https://github.com/GokuMohandas/testing-ml/search?l=jupyter-notebook)\n\n\n## Footer\n[ ](https://github.com \"GitHub\") © 2025 GitHub, Inc. \n### Footer navigation\n  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)\n  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)\n  * [Security](https://github.com/security)\n  * [Status](https://www.githubstatus.com/)\n  * [Docs](https://docs.github.com/)\n  * [Contact](https://support.github.com?tags=dotcom-footer)\n  * Manage cookies \n  * Do not share my personal information \n\n\nYou can’t perform that action at this time. \n",
    "content_quality_score": 0.8,
    "summary": null,
    "child_urls": [
        "https://github.com/GokuMohandas/testing-ml/#start-of-content",
        "https://github.com/",
        "https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml%2F",
        "https://github.com/features/copilot",
        "https://github.com/features/security",
        "https://github.com/features/actions",
        "https://github.com/features/codespaces",
        "https://github.com/features/issues",
        "https://github.com/features/code-review",
        "https://github.com/features/discussions",
        "https://github.com/features/code-search",
        "https://github.com/features",
        "https://docs.github.com",
        "https://skills.github.com",
        "https://github.com/enterprise",
        "https://github.com/team",
        "https://github.com/enterprise/startups",
        "https://github.com/solutions/industry/nonprofits",
        "https://github.com/solutions/use-case/devsecops",
        "https://github.com/solutions/use-case/devops",
        "https://github.com/solutions/use-case/ci-cd",
        "https://github.com/solutions/use-case",
        "https://github.com/solutions/industry/healthcare",
        "https://github.com/solutions/industry/financial-services",
        "https://github.com/solutions/industry/manufacturing",
        "https://github.com/solutions/industry/government",
        "https://github.com/solutions/industry",
        "https://github.com/solutions",
        "https://github.com/resources/articles/ai",
        "https://github.com/resources/articles/devops",
        "https://github.com/resources/articles/security",
        "https://github.com/resources/articles/software-development",
        "https://github.com/resources/articles",
        "https://resources.github.com/learn/pathways",
        "https://resources.github.com",
        "https://github.com/resources/whitepapers",
        "https://github.com/customer-stories",
        "https://partner.github.com",
        "https://github.com/solutions/executive-insights",
        "https://github.com/sponsors",
        "https://github.com/readme",
        "https://github.com/topics",
        "https://github.com/trending",
        "https://github.com/collections",
        "https://github.com/enterprise/advanced-security",
        "https://github.com/features/copilot/copilot-business",
        "https://github.com/premium-support",
        "https://github.com/pricing",
        "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax",
        "https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=GokuMohandas%2Ftesting-ml",
        "https://github.com/GokuMohandas",
        "https://github.com/GokuMohandas/testing-ml",
        "https://github.com/login?return_to=%2FGokuMohandas%2Ftesting-ml",
        "https://github.com/GokuMohandas/testing-ml/stargazers",
        "https://github.com/GokuMohandas/testing-ml/forks",
        "https://github.com/GokuMohandas/testing-ml/branches",
        "https://github.com/GokuMohandas/testing-ml/tags",
        "https://github.com/GokuMohandas/testing-ml/activity",
        "https://github.com/GokuMohandas/testing-ml/issues",
        "https://github.com/GokuMohandas/testing-ml/pulls",
        "https://github.com/GokuMohandas/testing-ml/actions",
        "https://github.com/GokuMohandas/testing-ml/projects",
        "https://github.com/GokuMohandas/testing-ml/security",
        "https://github.com/GokuMohandas/testing-ml/pulse",
        "https://github.com/GokuMohandas/testing-ml/commits/main/",
        "https://github.com/GokuMohandas/testing-ml/blob/main/.gitignore",
        "https://github.com/GokuMohandas/testing-ml/blob/main/README.md",
        "https://github.com/GokuMohandas/testing-ml/blob/main/testing.ipynb",
        "https://github.com/GokuMohandas/testing-ml/",
        "https://github.com/GokuMohandas/testing-ml/#testing-ml",
        "https://github.com/GokuMohandas/Made-With-ML",
        "https://github.com/GokuMohandas/mlops-course",
        "https://github.com/GokuMohandas/testing-ml/#data",
        "https://github.com/GokuMohandas/testing-ml/#expectations",
        "https://github.com/GokuMohandas/testing-ml/#production",
        "https://github.com/GokuMohandas/testing-ml/#models",
        "https://github.com/GokuMohandas/testing-ml/#training",
        "https://github.com/GokuMohandas/testing-ml/#behavioral",
        "https://github.com/GokuMohandas/testing-ml/#adversarial",
        "https://github.com/GokuMohandas/testing-ml/#inference",
        "https://github.com/great-expectations/great_expectations",
        "https://github.com/GokuMohandas/testing-ml/#loading-artifacts",
        "https://github.com/GokuMohandas/testing-ml/#prediction",
        "https://github.com/GokuMohandas/testing-ml/#learn-more",
        "https://github.com/topics/testing",
        "https://github.com/topics/machine-learning",
        "https://github.com/topics/pytest",
        "https://github.com/topics/mlops",
        "https://github.com/topics/great-expectations",
        "https://github.com/GokuMohandas/testing-ml/#readme-ov-file",
        "https://github.com/GokuMohandas/testing-ml/watchers",
        "https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml&report=GokuMohandas+%28user%29",
        "https://github.com/GokuMohandas/testing-ml/releases",
        "https://github.com/users/GokuMohandas/packages?repo_name=testing-ml",
        "https://github.com/GokuMohandas/testing-ml/search?l=jupyter-notebook",
        "https://github.com",
        "https://docs.github.com/site-policy/github-terms/github-terms-of-service",
        "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement",
        "https://github.com/security",
        "https://docs.github.com/",
        "https://support.github.com?tags=dotcom-footer",
        "https://github.blog",
        "https://madewithml.com",
        "https://www.linkedin.com/in/goku",
        "https://twitter.com/GokuMohandas",
        "https://colab.research.google.com/github/GokuMohandas/testing-ml/blob/main/testing.ipynb",
        "https://madewithml.com/courses/mlops/testing/",
        "https://madewithml.com/courses/mlops/testing/#pytest",
        "https://greatexpectations.io/expectations/",
        "https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/overview/",
        "https://madewithml.com/courses/mlops/testing#checkpoints",
        "https://madewithml.com/courses/mlops/testing#documentation",
        "https://madewithml.com/courses/mlops/orchestration#dataops",
        "https://madewithml.com/courses/mlops/data-stack#database",
        "https://madewithml.com/courses/mlops/api",
        "https://madewithml.com/courses/mlops/data-stack#data-warehouse",
        "https://www.getdbt.com/",
        "https://camo.githubusercontent.com/801210afab0c444fbabeb6f87b8686b9fd11907c3e3bc448a9e244be19b1ec4c/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f74657374696e672f70726f64756374696f6e2e706e67",
        "https://arxiv.org/abs/2005.04118",
        "https://www.githubstatus.com/"
    ]
}