[![DuckDB Logo for Download](https://duckdb.org/images/logo-dl/DuckDB_Logo-horizontal.svg)](https://duckdb.org/)
[Documentation](https://duckdb.org/docs/)
  * [Getting Started](https://duckdb.org/docs)
  * [Installation](https://duckdb.org/docs/installation/)
  * [Guides](https://duckdb.org/docs/guides/index)
  * [Data Import](https://duckdb.org/docs/data/overview)
  * [Client APIs](https://duckdb.org/docs/api/overview)
  * [SQL Introduction](https://duckdb.org/docs/sql/introduction)
  * [Why DuckDB](https://duckdb.org/why_duckdb)
  * [FAQ](https://duckdb.org/faq)


[Resources](https://duckdb.org/)
  * [Blog](https://duckdb.org/news/)
  * [Media](https://duckdb.org/media/)
  * [Events](https://duckdb.org/events/)
  * [Webshop](https://shop.duckdb.org/)


[GitHub 28.1k](https://github.com/duckdb/duckdb)
[Support](https://duckdblabs.com/#support)
[Support](https://duckdblabs.com/#support)
Search Shortcut cmd + k | ctrl + k
#  DuckDB is a fast 
|
database system 
Query and transform your data anywhere using DuckDB's feature-rich SQL dialect
[Installation](https://duckdb.org/#quickinstall) [Documentation](https://duckdb.org/docs/)
  * SQL
  * Python
  * R
  * Java
  * Node.js


12345678
```
-- Get the top-3 busiest train stations
SELECT
  station_name,
  count(*) AS num_services
FROM train_services
GROUP BY ALL
ORDER BY num_services DESC
LIMIT 3;
```

Aggregation query Join query Read remote CSV files Read remote Parquet files Spatial extension
Aggregation query
  * Aggregation query
  * Join query
  * Read remote CSV files
  * Read remote Parquet files
  * Spatial extension


[Live demo](https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count\(*\)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~)
#  DuckDB at a glance 
###  Simple 
DuckDB is easy to [install](https://duckdb.org/docs/installation) and deploy. It has zero external dependencies and runs in-process in its host application or as a single binary.
[Read more](https://duckdb.org/why_duckdb#simple)
###  Portable 
DuckDB runs on Linux, macOS, Windows, Android, iOS and all popular hardware architectures. It has idiomatic [client APIs](https://duckdb.org/docs/stable/clients/overview) for major programming languages.
[Read more](https://duckdb.org/why_duckdb#portable)
###  Feature-rich 
DuckDB offers a [rich SQL dialect](https://duckdb.org/docs/stable/sql/introduction). It can read and write file formats such as CSV, Parquet, and JSON, to and from the local file system and remote endpoints such as S3 buckets.
[Read more](https://duckdb.org/why_duckdb#feature-rich)
###  Fast 
DuckDB runs analytical queries at blazing speed thanks to its columnar engine, which supports parallel execution and can process larger-than-memory workloads.
[Read more](https://duckdb.org/why_duckdb#fast)
###  Extensible 
DuckDB is extensible by third-party features such as new data types, functions, file formats and new SQL syntax. User contributions are available as community extensions.
[Read more](https://duckdb.org/why_duckdb#extensible)
###  Free 
DuckDB and its core extensions are open-source under the permissive MIT License. The intellectual property of the project is held by the [DuckDB Foundation](https://duckdb.org/foundation).
[Read more](https://duckdb.org/why_duckdb#free)
#  Installation 
DuckDB is seamlessly integrated with major programming languages. It can be installed in less than 10 seconds on most platforms.
[More installation options](https://duckdb.org/docs/installation/)
  * Command line
  * Python
  * R
  * Java
  * Node.js
  * ODBC
  * Rust
  * Go


```
curl https://install.duckdb.org | sh
```

Latest release: DuckDB 1.2.1 |  System detected: Linux
```
pip install duckdb
```

```
install.packages("duckdb")
```

```
<dependency>
	<groupId>org.duckdb</groupId>
	<artifactId>duckdb_jdbc</artifactId>
	<version>1.2.1</version>
</dependency>
```

```
npm install @duckdb/node-api
```

```
curl https://install.duckdb.org | sh
```

```
curl https://install.duckdb.org | sh
```

[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip)
[odbc-osx-universal.zip](https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/odbc-osx-universal.zip)
[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_odbc-linux-amd64.zip](https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/duckdb_odbc-linux-amd64.zip)
[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_odbc-windows-amd64.zip](https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.1/duckdb_odbc-windows-amd64.zip)
```
cargo add duckdb --features bundled
```

```
go get github.com/marcboeker/go-duckdb
```

#  Blog 
[](https://duckdb.org/2025/03/28/using-duckdb-in-streamlit.html "Using DuckDB in Streamlit")
![Using DuckDB in Streamlit](https://duckdb.org/images/blog/thumbs/duckdb-streamlit.svg)
using DuckDB
###  Using DuckDB in Streamlit 
2025-03-28
Petrica Leuca
[](https://duckdb.org/2025/03/21/maximizing-your-delta-scan-performance.html "Maximizing Your Delta Scan Performance in DuckDB")
![Maximizing Your Delta Scan Performance in DuckDB](https://duckdb.org/images/blog/thumbs/delta-lake-part-2.png)
extensions
###  Maximizing Your Delta Scan Performance in DuckDB 
2025-03-21
Sam Ansmink
[ All blog posts ](https://duckdb.org/news)
Aggregation query Join query Read CSV files Read Parquet files from S3 Spatial extension
SQL query Pandas integration Custom UDFs
SQL query duckplyr dplyr integration
SQL query Appender
SQL query Web service integration
```
-- Get the top-3 busiest train stations
SELECT
  station_name,
  count(*) AS num_services
FROM train_services
GROUP BY ALL
ORDER BY num_services DESC
LIMIT 3;
```

```
-- Load CSV file to a table. DuckDB auto-detects
-- the CSV's format, column name and types
CREATE TABLE stations AS
  FROM 's3://duckdb-blobs/stations.csv';
```

```
-- Directly query Parquet file in S3
SELECT
  station_name,
  count(*) AS num_services
FROM 's3://duckdb-blobs/train_services.parquet'
GROUP BY ALL
ORDER BY num_services DESC
LIMIT 10;
```

```
-- Find the top-3 longest domestic train routes
SELECT s1.name_short, s2.name_short, d.distance
FROM distances d
JOIN stations s1 ON d.station1 = s1.code
JOIN stations s2 ON d.station2 = s2.code
WHERE s1.country = s2.country
 AND s1.code < s2.code
ORDER BY distance DESC
LIMIT 3;
```

```
-- List the closest IC stations (as the crow flies)
SELECT
  s1.name_long AS station1,
  s2.name_long AS station2,
  ST_Distance(
    ST_Point(s1.geo_lng, s1.geo_lat),
    ST_Point(s2.geo_lng, s2.geo_lat)
  ) * 111_139 AS distance
FROM stations s1, stations s2
WHERE s1.type LIKE '%Intercity%'
 AND s2.type LIKE '%Intercity%'
 AND s1.id < s2.id
ORDER BY distance ASC
LIMIT 3;
```

```
# Get the top-3 busiest train stations
import duckdb
duckdb.sql("""
  SELECT station, count(*) AS num_services
  FROM train_services
  GROUP BY ALL
  ORDER BY num_services DESC
  LIMIT 3;
  """)
```

```
# Reading and writing Pandas dataframes
import pandas as pd
import duckdb
df_in = pd.DataFrame({
  'station': ['Delft', 'Delft', 'Gouda', 'Gouda'],
  'day': ['Mon', 'Tue', 'Mon', 'Tue'],
  'num_services' : [22, 20, 27, 25]})
# Run query on a dataframe and return a dataframe
df_out = duckdb.sql("""
  SELECT station, sum(num_services)
  FROM df_in
  GROUP BY station
  """).to_df()
```

```
# Create custom user-defined function
import duckdb
def plus_one(x):
  return x + 1
con = duckdb.connect()
con.create_function('plus_one', plus_one,
  ['BIGINT'], 'BIGINT', type='native')
con.sql("""
  SELECT sum(plus_one(i)) FROM range(10) tbl(i);
  """)
```

```
# Find the largest sepals/petals in the Iris data setlibrary(duckdb)con<-dbConnect(duckdb())duckdb_register(con,"iris",iris)query<-r'(
  SELECT count(*) AS num_observations,
  max("Sepal.Width") AS max_width,
  max("Petal.Length") AS max_petal_length
  FROM iris
  WHERE "Sepal.Length" > 5
  GROUP BY ALL
  )'dbGetQuery(con,query)
```

```
# Find the largest sepals/petals in the Iris data set# using duckplyrlibrary("duckplyr")iris|>filter(Sepal.Length>5)|>group_by(Species)|>summarize(num_observations=n(),max_width=max(Sepal.Width),max_petal_length=max(Petal.Length),na.rm=TRUE)|>collect()
```

```
# Find the largest sepals/petals in the Iris data set# using dplyrlibrary("duckdb")library("dplyr")con<-dbConnect(duckdb())duckdb_register(con,"iris",iris)tbl(con,"iris")|>filter(Sepal.Length>5)|>group_by(Species)|>summarize(num_observations=count(),max_width=max(Sepal.Width),max_petal_length=max(Petal.Length),na.rm=TRUE)|>collect()
```

```
// Get a list of train stations by traffic
Connection conn =
  DriverManager.getConnection("jdbc:duckdb:");
Statement st = conn.createStatement();
ResultSet rs = st.executeQuery(
  "SELECT station_name,\n" +
  "    count(*) AS num_services\n" +
  "FROM train_services\n" +
  "GROUP BY ALL\n" +
  "ORDER BY num_services DESC;");
System.out.println(rs.next());
```

```
// Perform bulk inserts using the Appender API
DuckDBConnection conn = (DuckDBConnection)
  DriverManager.getConnection("jdbc:duckdb:");
Statement st = conn.createStatement();
st.execute("CREATE TABLE person " +
  "(name VARCHAR, age INT)");
var appender = conn.createAppender(
  DuckDBConnection.DEFAULT_SCHEMA, "person");
appender.beginRow();
appender.append("MC Ducky");
appender.append(49);
appender.endRow();
appender.close();
```

```
// Get the top-3 busiest train stations in May
import { DuckDBInstance } from '@duckdb/node-api';
const instance = await DuckDBInstance.create();
const connection = await instance.connect();
const reader = await connection.runAndReadAll(
 `SELECT station_name, count(*) AS num_services
  FROM
  'http://blobs.duckdb.org/train_services.parquet'
  WHERE monthname(date) = 'May'
  GROUP BY ALL
  ORDER BY num_services DESC
  LIMIT 3;`
);
console.table(reader.getRows());
```

```
// Web Service Integration:
// Create endpoint to generate numbers
import express from "express";
import { DuckDBInstance } from '@duckdb/node-api';
const app = express();
const instance = await DuckDBInstance.create();
const connection = await instance.connect();
app.get("/getnumbers", async (req, res) => {
 const reader = await connection.runAndReadAll(
  "SELECT random() AS num FROM range(10)");
 res.end(JSON.stringify(reader.getRows()));
});
app.listen(8082, () => console.log(
 "Go to: http://localhost:8082/getnumbers"));
```

###### Documentation
[Getting Started](https://duckdb.org/docs/stable/) [Installation](https://duckdb.org/docs/installation/) [Guides](https://duckdb.org/docs/stable/guides/overview.html) [Data Import](https://duckdb.org/docs/stable/data/overview.html) [Client APIs](https://duckdb.org/docs/stable/clients/overview.html) [SQL Introduction](https://duckdb.org/docs/stable/sql/introduction.html) [Why DuckDB](https://duckdb.org/why_duckdb.html) [FAQ](https://duckdb.org/faq.html)
###### Resources
[Blog](https://duckdb.org/news/) [Media](https://duckdb.org/media/) [Events](https://duckdb.org/events/) [Webshop](https://shop.duckdb.org/) [Code of Conduct](https://duckdb.org/code_of_conduct.html) [Trademark Use](https://duckdb.org/trademark_guidelines.html) [Release Calendar](https://duckdb.org/docs/stable/dev/release_calendar.html) [Development Roadmap](https://duckdb.org/docs/stable/dev/roadmap.html) [RSS Feed](https://duckdb.org/feed.xml) [Status Page](https://status.duckdb.org/)
###### Organizations
[DuckDB Foundation](https://duckdb.org/foundation/) [DuckDB Labs](https://duckdblabs.com/)
###### Community
[Community Extensions](https://duckdb.org/community_extensions/) [Bluesky](https://bsky.app/profile/duckdb.org) [LinkedIn](https://www.linkedin.com/company/duckdb/posts) [X (Twitter)](https://twitter.com/duckdb) [Discord](https://discord.duckdb.org) [Stack Overflow](https://stackoverflow.com/questions/tagged/duckdb)
© 2025 DuckDB Foundation, Amsterdam NL
